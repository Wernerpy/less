https://mail.google.com/mail/u/0/#inbox
https://github.com/Wernerpy/clock.git
  

import tkinter as tk
import sys
import time
import calendar
import random
import datetime as dt
from tkinter import *





""" DICTIONARY PHRASES """
phrases = ["Phrase1", "Phrase2", "Phrase3"]




class Clock(tk.Label):
    """ Class that contains the clock widget and clock refresh """

    def __init__(self, parent=None, seconds=True, colon=False):
        """
        Create and place the clock widget into the parent element
        It's an ordinary Label element with two additional features.
        """
        tk.Label.__init__(self, parent)

        self.display_seconds = seconds
        if self.display_seconds:
            self.time     = time.strftime('%I:%M:%S %p')
        else:
            self.time     = time.strftime('%I:%M:%S %p').lstrip('0')
        self.display_time = self.time
        self.configure(text=self.display_time)

        if colon:
            self.blink_colon()

        self.after(200, self.tick)


    def tick(self):
        """ Updates the display clock every 200 milliseconds """
        if self.display_seconds:
            new_time = time.strftime('%I:%M:%S %p')
        else:
            new_time = time.strftime('%I:%M:%S %p').lstrip('0')
        if new_time != self.time:
            self.time = new_time
            self.display_time = self.time
            self.config(text=self.display_time)
        self.after(200, self.tick)


    def blink_colon(self):
        """ Blink the colon every second """
        if ':' in self.display_time:
            self.display_time = self.display_time.replace(':',' ')
        else:
            self.display_time = self.display_time.replace(' ',':',1)
        self.config(text=self.display_time)
        self.after(1000, self.blink_colon)



class FullScreenApp(object):
    def __init__(self, master, **kwargs):
        self.master=master
        pad=3
        self._geom='200x200+0+0'
        master.geometry("{0}x{1}+0+0".format(
            master.winfo_screenwidth()-pad, master.winfo_screenheight()-pad))
        master.bind('<Escape>',self.toggle_geom)            
    def toggle_geom(self,event):
        geom=self.master.winfo_geometry()
        print(geom,self._geom)
        self.master.geometry(self._geom)
        self._geom=geom


# Root is the name of the Tkinter Window. This is important to remember.
root=tk.Tk()

# Sets background color to black
root.configure(bg="black")

# Removes the window bar at the top creating a truely fullscreen
root.wm_attributes('-fullscreen','true')
tk.Button(root, text="Quit", bg="black", fg="black", command=lambda root=root:quit(root)).pack()

# this displays the clock know as clock1
clock1 = Clock(root)
clock1.pack()

# This gives the clock format.
clock1.configure(bg='black',fg='white',font=("helvetica",125))

# Gets date from host computer.
date = dt.datetime.now()
# Takes the date and formats it.
format_date = f"{date:%a, %b %d %Y}"

# Selects a random phrase from the phrases dictionary
phrase_print = random.choice(phrases)

# Add the date to the tkinter window
w = Label(root, text=format_date, fg="white", bg="black", font=("helvetica", 40))
w.pack()

# Add the phrase to the tkinter window
e = Label(root, text=phrase_print, fg="white", bg="black", font=("helvetica", 28))
e.pack()


root.mainloop()



# Import the required libraries
from tkinter import *
import datetime as dt

# Create an instance of tkinter frame or window
win=Tk()

# Set the size of the tkinter window
win.geometry("700x350")

# Create an instance of datetime module
date=dt.datetime.now()

# Format the date
format_date=f"{date:%a, %b %d %Y}"

# Display the date in a a label widget
label=Label(win, text=format_date, font=("Calibri", 25))
label.pack()

win.mainloop()






#while
'''
a = 0
while True:
    a +=1
    print(a)
    if a == 100 and a ==100 or a == 100:
        print('Stop')
        break
'''
x = 120
y = 133
i = 0
while x*2<1000 or y*2<1200: 
#while x*2<1000 and y*2<1200:
    print((x*2<1000),(y*2<1200))
    print(i,x,y)
    x = x + 23
    y = y + 9
    i +=1





#for
'''
print('привет')
print('привет')
print('привет')
print('привет')
print('привет')

for i in range(0,5):
    print('привет',i)

'''
'''
for i in range(0,5):
    print('привет %s' % i)
'''
'''
print(list (range(10,17)))
'''
'''
for i in range(0,5):
    print('привет %s' % i)
    print('Ура !!!')
'''
'''
sp1 =[10,20,30,77,99,101,230]

for i in sp1:
    print(sp1)

for i in sp1:
    print(i)
'''
'''
sp1 =[1,2,3,4,5,6,7]

for i in sp1:
    print(i,sp1)
'''
'''
sp2 =['привет','ура','победа','да','нет','город','страна']

print(sp2)

for i in sp2:
    print(i)
'''
'''
for i in range(1,11):
    for t in range(1,11):
        s = i * t 
        if s % 2==0:
           print(i ,'*', t,'=', s)

'''
'''
sp1 =[1,2,3,4,5,6,7]
sp2 =['привет','ура','победа','да','нет','город','страна']

for i in sp1:
    for t in sp2:
        print(i,t,'x')
        print ('%s%s ' % (i,t))
'''

a = 20 # найдено монет
j = 10 # копируется
d = 2 # минусуется
sum1 = a

# 365 дней сколько будет монет
'''
for i in range(1,366):
    sum = ((a + s) -2) * i
print(sum)
print((20+10-2)*365)
'''
for i in range(1,366):
    sum1 = sum1+j-d
    print('Дней %s стало монет %s ' % (i,sum1))






#metod all any
sp1 = [True, False, True]

sp2 = [1, 15, 50, 100, 200]


if any(num > 50 for num in sp2):
    print('есть число больше 50')

if all(num > 0 for num in sp2):
    print('все числа больше 0')

    
'''
if all(sp1):
    print('все элименты True')
else:
    print('не все элименты True')
'''
'''
if any(sp1):
    print('хотябы один элемент True')
'''
'''
if any(sp1) and not all(sp1):
    print('есть элемент True и False')

'''



import turtle

t = turtle.Pen()

q = 100
w = 100
e = 10
r = 0

for i in range(72):
    t.speed(11)
    t.forward(200)
    t.left(185)
    t.forward(200)
    '''
    t.goto(q,w)
    t.goto(e,r)
    q = q + 10
    w = w + 10
    e = e + 10
    r = r + 10



print(q,w,e,r)
 '''   
    
   
    
    
    #if k % 1 == 0:
        
        
   
   
    


input()








D = 250
p = 1.14 #Железо 7.8 PUR 1.14 Капролон 1.16 Паронит 1.2
H = 3
d = 200

T = (D - d)/2
pi = 3.14

m = pi * H * T * (d + T) / 1000 * p
m = round(m,7)

V1 = (H * T * pi * (d + T)/1000)*1000
V1 = round(V1,2)

S = pi / 4 * ((d + 2 * T)**2 - d**2)
S = round(S,2)


print(' D_1.0.3 ')
print('Result p:',p)
print('Result D:',D)
print('Result m:',m)
print('Result H:',H)
print('Result d:',d)
print('Result V1:',V1)
print('Result S:',S)

print(' ')






import tkinter as tk  
from functools import partial  
   
   
def show(label_result, n1, n2):  
    num1 = (n1.get())  
    num2 = (n2.get())  
    result = int(num1)+int(num2)  
    label_result.config(text="Result = %d" % result)  
    return  
   
root = tk.Tk()  
root.geometry('400x200+100+200')  
  
root.title('Calculator')  
   
number1 = tk.StringVar()  
number2 = tk.StringVar()  
  
labelNum1 = tk.Label(root, text="A").grid(row=1, column=0)  
  
labelNum2 = tk.Label(root, text="B").grid(row=2, column=0)  
  
labelResult = tk.Label(root)  
  
labelResult.grid(row=7, column=2)  
  
entryNum1 = tk.Entry(root, textvariable=number1).grid(row=1, column=2)  
  
entryNum2 = tk.Entry(root, textvariable=number2).grid(row=2, column=2)  
  
show = partial(show, labelResult, number1, number2)  
  
buttonCal = tk.Button(root, text="Calculate", command=show).grid(row=3, column=0)  
  
root.mainloop()  

x1 = 33
d1 = 0
T = 0
D2 = 14


'''
for i in range(1,x1+1,1):
    T = i
    if x1 == (d1 + T) * T:
        print('Толщина: ', T )
        break

x1 = T * (d1 + T)
'''
for i in range(1,x1+1,1):
    T = i
    for i in range(1,D2+1,1):
        d1 = i   
        if x1 == T * (d1 + T):
            print(T,'ответ', d1)
            break

input()

'''

T = 3  #толщина
D2 = 14 #внешний
d1 = 8  #внутренний
pi = 3.14
W = 2.5  #высота 
m = 2.03
po = 7.85 #г/cm3
c = 43.96 #34.54
s = 103.67 #103.62 
V = 259.18134
R2 = #внешний
к1 = #внутренний


s = pi / 4 * ((D2*D2)-(d1*d1))
s = pi *(R2*R2 - r1*r1)
d1 = D2 - 2*T
p = m/V
C = pi * (d1 + T)  C = pi * (D2 - T) 
s = pi*(R2*R2)-pi * (r1*r1)=pi((R2*R2)-(r1*r1))

V = W * T * pi *(D2 + T)

m = pi * W * T * (d1 + T) / 1000 * po


m = 2.03
W = 2.5  #высота 
D2 = 14 #внешний
po = 7.85 #г/cm3

'''
T = 0
d1 = 0
x = 0
x1 = 0

'''
print('Ведите массу кольца')
m = float(input())
print('Ведите высоту кольца')
W = float(input())
print('Ведите внешний диаметр кольца')
D2 = float(input())
print('Ведите плотность кольца')
po = float(input())
'''
m = 2.03
W = 2.5
D2 = 14
d1 = 0 #8
po = 7.85
#f = 0


#m = pi * W * T * (d1 + T) / 1000 * po
x = m / po * 1000 / 3.14 / 2.5 
x1 = round(x)

#x1 = T * (d1 + T)

for i in range(1,x1+1,1):
    T = i
    for i in range(1,D2+1,1):
        d1 = i   
        if x1 == T * (d1 + T):
            print(T,'ответ', d1)
            break


#print('Внутренний: ', d1)


















m = float(input('Введите массу кольца: m 2.03 '))
W = float(input('Введите высоту кольца: W 2.5 '))
D2 = float(input('Введите внешний диаметр кольца: D 14 '))
po = float(input('Введите плотность кольца: p 7.85g/cm3 '))

d1 = 0 #8

x = m / po * 1000 / 3.14 / 2.5 
x1 = round(x)
D2 = round(D2)
for i in range(1,x1+1,1):
    T = i

    for i in range(1,D2+1,1):
        d1 = i   
        if x1 == T * (d1 + T):
            print('Внутренний диаметр', d1)
            break



/////////////////////////////////////////
pi = float(3.14)
W = float(3.40)
D = float(32.92) #внутр
T = float(3.40)
p = float(0.04)
m = float(pi * W * T * (D + T) /1000 * p)

print('масса кольца: g/cm3 ',m)

/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////


D = 250
p = 1.14 #Железо 7.8 PUR 1.14 Капролон 1.16 Паронит 1.2
H = 3
d = 200

T = (D - d)/2
pi = 3.14

m = pi * H * T * (d + T) / 1000 * p
m = round(m,7)

V1 = (H * T * pi * (d + T)/1000)*1000
V1 = round(V1,2)

S = pi / 4 * ((d + 2 * T)**2 - d**2)
S = round(S,2)


print(' D_1.0.3 ')
print('Result p:',p)
print('Result D:',D)
print('Result m:',m)
print('Result H:',H)
print('Result d:',d)
print('Result V1:',V1)
print('Result S:',S)

print(' ')







httpsmax-calc.ruKalkulyatorPloschadKolca.html#listing_5


Площадь кольца через толшину и внешний диаметр



from tkinter import *
import turtle
from math import *
import math
import re
from functools import partial



def is_valid(newval):
    return re.match("^\\d{0,11}$", newval) is not None



def show(lb4,ent1,ent2):
        D  = (ent1.get()) # диаметр
        t  = (ent2.get()) # толщина
       
        math.pi = pi
        print(int(t)+int(D))
        S = pi / 4 * ((int(D)**2) - ((int(D) - 2 * int(t))**2))
          
        lb4["text"] = S , 'mm2'
        #lb4.config(text="Result = %d" % result)  
        return  



t = Tk()
t.title('Пдощадь круга')
t.geometry('500x400+10+10')

number1 = StringVar()  
number2 = StringVar() 

check = (t.register(is_valid), "%P")

can = Canvas(t, width=250, height=250)
can.place(x=200,y=100)

can.create_line(10,50,100,50)
can.create_line(35,10,50,30)
can.create_oval(10,100,100,10)
can.create_oval(30,80,80,30)

lb1 = Label(text='Площадь кольца через толшину и внешний диаметр' )
lb1.place(x=0,y=5)

lb2 = Label(text='Диаметр D')
lb2.place(x=30,y=25)

lb3 = Label(text='Толшинa T')
lb3.place(x=30,y=63)

lb4 = Label(text='Площадь: ')
lb4.place(x=200,y=63)

ent1 = Entry(validate="key", validatecommand=check,textvariable=number1)
ent1.place(x=30,y=45)

ent2 = Entry(validate="key", validatecommand=check,textvariable=number2)
ent2.place(x=30,y=85)

show = partial(show, lb4, number1, number2) 

btn = Button(text='Вычислить',command=show)
btn.place(x=50,y=115)





t.mainloop()






///////////////////////////////////////////////////////////////

from cProfile import label
from tabnanny import check
from tkinter import *
from math import *
import re
from functools import partial

def label_all():

    lb1 = Label(text=' Вычисление внутреннего диаметра кольца ',font='Arial 13 bold', bg = '#999')
    lb1.place(x=5,y=5)

    lb2 = Label(text='Внешний диаметр D mm',bg='#999')
    lb2.place(x=5,y=50)

    lb7 = Label(text=' Внутренний диаметр d mm: ',bg='#999')
    lb7.place(x=10,y=310)

    lb27 = Label(text=' Ответ: ',bg='#999')
    lb27.place(x=200,y=310)

    lb3 = Label(text='Высота H mm',bg='#999')
    lb3.place(x=5, y=100)

    lb4 = Label(text='Масса m g', bg='#999')
    lb4.place(x=5,y=150)

    lb5 = Label(text='Плотность p g.cm2',bg='#999')
    lb5.place(x=5,y=200)

    lb8 = Label(text='Внешний диаметр D mm',bg='#999')
    lb8.place(x=205,y=50)

    lb9 = Label(text='Высота H mm',bg='#999')
    lb9.place(x=205, y=100)

    lb10 = Label(text='Внутренний диаметр d mm', bg='#999')
    lb10.place(x=205,y=150)

    lb11 = Label(text='Плотность p g.cm2',bg='#999')
    lb11.place(x=205,y=200)

def ent_all():


    en1D = Entry(validate='key', validatecommand=check, textvariable=number1)
    en1D.place(x=5,y=70)

    en2H = Entry(validate='key', validatecommand=check, textvariable=number2)
    en2H.place(x=5,y=120)

    en3m = Entry(validate='key', validatecommand=check, textvariable=number3)
    en3m.place(x=5,y=170)

    en4p = Entry(validate='key', validatecommand=check,textvariable=number4)
    en4p.place(x=5,y=220)

    en5D = Entry(validate='key', validatecommand=check, textvariable=number5)
    en5D.place(x=205,y=70)

    en6H = Entry(validate='key', validatecommand=check, textvariable=number6)
    en6H.place(x=205,y=120)

    en7d = Entry(validate='key', validatecommand=check, textvariable=number7)
    en7d.place(x=205,y=170)

    en8p = Entry(validate='key', validatecommand=check,textvariable=number8)
    en8p.place(x=205,y=220)

def is_valid(newval):
    return re.match("\\d{0,11}", newval) is not None

def show(lb6,en1D,en2H,en3m,en4p):
    D = (en1D.get())
    H = (en2H.get())
    m = (en3m.get())
    p = (en4p.get())
    D = float(D)
    m = float(m)
    p = float(p)
    H = float(H)
    print('D',D)
    print('m',m)
    print('p',p)
    print('H',H)

    #D = 100
    #m = 46.22
    m = round(m,2)
    #H = 1

    pi = 3.1415 
    #p = 7.85 

    V = m/p*1000
    V = round(V,2)

    S = V / H
    S = round(S,2)
    x = V * m / p * H 

    S2 = (pi * D**2 / 4) - S 
    S3 = S2/pi*4
    S4 = sqrt(S3)
    S4 = round(S4,2)
    
    print('')
    print('Result D:',D)
    print('Result d:',S4)
    print('Result H:',H)
    print('Result V:',V)
    print('Result m:',m)
    print('Result S:',S)

    print('')

    lb6['text'] = S4 ,'mm'
    return

def show1(lb26,en5D,en6H,en7d,en8p):
    D = (en5D.get())
    H = (en6H.get())
    d = (en7d.get())
    p = (en8p.get())
    D = float(D)
    d = float(d)
    p = float(p)
    H = float(H)
    print('D',D)
    print('d',d)
    print('p',p)
    print('H',H)

    pi = float(3.14) #постоянная величина
    T = float(D - d)/2 #толщина

    m = float(pi * H * T * (d + T) / 1000 * p) #масса
    m = round(m,2)

    V1 = H * T * pi * (d + T) #объем
    V1 = round(V1,2)
    V2 = m/p #объем

    S = pi / 4 * ((d + 2 * T)**2 - d**2) #площадь
    S1 = pi / 4 * (D**2 - (D - 2 * T)**2) #площадь
    S2 = pi / 4 * (D**2 - d**2) #площадь
    S2 = round(S2,2)

    C1 = pi * D #длина окружности
    C2 = pi * (D - T)
    C3 = pi * (d + T)


    print(' ')

    print('Result D:',D)
    print('Result m:',m)
    print('Result H:',H)
    print('Result d:',d)
    print('Result V1:',V1)
    print('Result S2:',S2)

    print(' ')

    #lb26['text'] = 'D:',D,  'm:',m,' \n  H:',H,'d:',d,'V1:',V1,'S2:',S2
    #return
    lb26.config(text=' D: '+str(D)+' m: '+str(m)+' H; '+str(H))
    lb27.config(text=' d: '+str(d)+' V: '+str(V1)+' S: '+str(S2))



root = Tk()
root.title('Площадь')
root.geometry('500x400+10+10')
root.resizable(0,0)
root['bg']= '#999'

lb6 = Label(text=' ....  ',bg='#999')
lb6.place(x=15,y=330) 

lb26 = Label(text=' .... ',bg='#999')
lb26.place(x=205,y=330) 

lb27 = Label(text=' .... ',bg='#999')
lb27.place(x=205,y=360) 

number1 = StringVar()
number2 = StringVar()  
number3 = StringVar()
number4 = StringVar()
number5 = StringVar()
number6 = StringVar()  
number7 = StringVar()
number8 = StringVar()


check = (root.register(is_valid), '%P')

label_all()
ent_all()

show = partial(show,lb6,number1,number2,number3,number4)
show1 = partial(show1,lb26,number5,number6,number7,number8)

btn1 = Button(text='Вычислить', font='Arial 11 bold',bg='grey',
              bd=5,width=15,height=1,command=show)
btn1.place(x=6,y=250)

btn2 = Button(text='Вычислить', font='Arial 11 bold',bg='grey',
              bd=5,width=15,height=1,command=show1)
btn2.place(x=200,y=250)


root.mainloop()

////////////////////////////////////////////////////////////////



httpsmax-calc.ruKalkulyatorPloschadKolca.html#listing_5


Площадь кольца через толшину и внешний диаметр



from tkinter import *
import turtle
from math import *
import math
import re
from functools import partial



def is_valid(newval):
    return re.match("^\\d{0,11}$", newval) is not None



def show(lb4,ent1,ent2):
        D  = (ent1.get()) # диаметр
        t  = (ent2.get()) # толщина
       
        math.pi = pi
        print(int(t)+int(D))
        S = pi / 4 * ((int(D)**2) - ((int(D) - 2 * int(t))**2))
          
        lb4["text"] = S , 'mm2'
        #lb4.config(text="Result = %d" % result)  
        return  



t = Tk()
t.title('Пдощадь круга')
t.geometry('500x400+10+10')

number1 = StringVar()  
number2 = StringVar() 

check = (t.register(is_valid), "%P")

can = Canvas(t, width=250, height=250)
can.place(x=200,y=100)

can.create_line(10,50,100,50)
can.create_line(35,10,50,30)
can.create_oval(10,100,100,10)
can.create_oval(30,80,80,30)

lb1 = Label(text='Площадь кольца через толшину и внешний диаметр' )
lb1.place(x=0,y=5)

lb2 = Label(text='Диаметр D')
lb2.place(x=30,y=25)

lb3 = Label(text='Толшинa T')
lb3.place(x=30,y=63)

lb4 = Label(text='Площадь: ')
lb4.place(x=200,y=63)

ent1 = Entry(validate="key", validatecommand=check,textvariable=number1)
ent1.place(x=30,y=45)

ent2 = Entry(validate="key", validatecommand=check,textvariable=number2)
ent2.place(x=30,y=85)

show = partial(show, lb4, number1, number2) 

btn = Button(text='Вычислить',command=show)
btn.place(x=50,y=115)





t.mainloop()






///////////////////////////////////////////////////////////////

from cProfile import label
from tabnanny import check
from tkinter import *
from math import *
import re
from functools import partial

def label_all():

    lb1 = Label(text=' Вычисление внутреннего диаметра кольца ',font='Arial 13 bold', bg = '#999')
    lb1.place(x=5,y=5)

    lb2 = Label(text='Внешний диаметр D mm',bg='#999')
    lb2.place(x=5,y=50)

    lb7 = Label(text=' Внутренний диаметр d mm: ',bg='#999')
    lb7.place(x=10,y=310)

    lb27 = Label(text=' Ответ: ',bg='#999')
    lb27.place(x=200,y=310)

    lb3 = Label(text='Высота H mm',bg='#999')
    lb3.place(x=5, y=100)

    lb4 = Label(text='Масса m g', bg='#999')
    lb4.place(x=5,y=150)

    lb5 = Label(text='Плотность p g.cm2',bg='#999')
    lb5.place(x=5,y=200)

    lb8 = Label(text='Внешний диаметр D mm',bg='#999')
    lb8.place(x=205,y=50)

    lb9 = Label(text='Высота H mm',bg='#999')
    lb9.place(x=205, y=100)

    lb10 = Label(text='Внутренний диаметр d mm', bg='#999')
    lb10.place(x=205,y=150)

    lb11 = Label(text='Плотность p g.cm2',bg='#999')
    lb11.place(x=205,y=200)

def ent_all():


    en1D = Entry(validate='key', validatecommand=check, textvariable=number1)
    en1D.place(x=5,y=70)

    en2H = Entry(validate='key', validatecommand=check, textvariable=number2)
    en2H.place(x=5,y=120)

    en3m = Entry(validate='key', validatecommand=check, textvariable=number3)
    en3m.place(x=5,y=170)

    en4p = Entry(validate='key', validatecommand=check,textvariable=number4)
    en4p.place(x=5,y=220)

    en5D = Entry(validate='key', validatecommand=check, textvariable=number5)
    en5D.place(x=205,y=70)

    en6H = Entry(validate='key', validatecommand=check, textvariable=number6)
    en6H.place(x=205,y=120)

    en7d = Entry(validate='key', validatecommand=check, textvariable=number7)
    en7d.place(x=205,y=170)

    en8p = Entry(validate='key', validatecommand=check,textvariable=number8)
    en8p.place(x=205,y=220)

def is_valid(newval):
    return re.match("\\d{0,11}", newval) is not None

def show(lb6,en1D,en2H,en3m,en4p):
    D = (en1D.get())
    H = (en2H.get())
    m = (en3m.get())
    p = (en4p.get())
    D = float(D)
    m = float(m)
    p = float(p)
    H = float(H)
    print('D',D)
    print('m',m)
    print('p',p)
    print('H',H)

    #D = 100
    #m = 46.22
    m = round(m,2)
    #H = 1

    pi = 3.1415 
    #p = 7.85 

    V = m/p*1000
    V = round(V,2)

    S = V / H
    S = round(S,2)
    x = V * m / p * H 

    S2 = (pi * D**2 / 4) - S 
    S3 = S2/pi*4
    S4 = sqrt(S3)
    S4 = round(S4,2)
    
    print('')
    print('Result D:',D)
    print('Result d:',S4)
    print('Result H:',H)
    print('Result V:',V)
    print('Result m:',m)
    print('Result S:',S)

    print('')

    lb6['text'] = S4 ,'mm'
    return

def show1(lb26,en5D,en6H,en7d,en8p):
    D = (en5D.get())
    H = (en6H.get())
    d = (en7d.get())
    p = (en8p.get())
    D = float(D)
    d = float(d)
    p = float(p)
    H = float(H)
    print('D',D)
    print('d',d)
    print('p',p)
    print('H',H)

    pi = float(3.14) #постоянная величина
    T = float(D - d)/2 #толщина

    m = float(pi * H * T * (d + T) / 1000 * p) #масса
    m = round(m,2)

    V1 = H * T * pi * (d + T) #объем
    V1 = round(V1,2)
    V2 = m/p #объем

    S = pi / 4 * ((d + 2 * T)**2 - d**2) #площадь
    S1 = pi / 4 * (D**2 - (D - 2 * T)**2) #площадь
    S2 = pi / 4 * (D**2 - d**2) #площадь
    S2 = round(S2,2)

    C1 = pi * D #длина окружности
    C2 = pi * (D - T)
    C3 = pi * (d + T)


    print(' ')

    print('Result D:',D)
    print('Result m:',m)
    print('Result H:',H)
    print('Result d:',d)
    print('Result V1:',V1)
    print('Result S2:',S2)

    print(' ')

    #lb26['text'] = 'D:',D,  'm:',m,' \n  H:',H,'d:',d,'V1:',V1,'S2:',S2
    #return
    lb26.config(text=' D: '+str(D)+' m: '+str(m)+' H; '+str(H))
    lb27.config(text=' d: '+str(d)+' V: '+str(V1)+' S: '+str(S2))



root = Tk()
root.title('Площадь')
root.geometry('500x400+10+10')
root.resizable(0,0)
root['bg']= '#999'

lb6 = Label(text=' ....  ',bg='#999')
lb6.place(x=15,y=330) 

lb26 = Label(text=' .... ',bg='#999')
lb26.place(x=205,y=330) 

lb27 = Label(text=' .... ',bg='#999')
lb27.place(x=205,y=360) 

number1 = StringVar()
number2 = StringVar()  
number3 = StringVar()
number4 = StringVar()
number5 = StringVar()
number6 = StringVar()  
number7 = StringVar()
number8 = StringVar()


check = (root.register(is_valid), '%P')

label_all()
ent_all()

show = partial(show,lb6,number1,number2,number3,number4)
show1 = partial(show1,lb26,number5,number6,number7,number8)

btn1 = Button(text='Вычислить', font='Arial 11 bold',bg='grey',
              bd=5,width=15,height=1,command=show)
btn1.place(x=6,y=250)

btn2 = Button(text='Вычислить', font='Arial 11 bold',bg='grey',
              bd=5,width=15,height=1,command=show1)
btn2.place(x=200,y=250)


root.mainloop()

////////////////////////////////////////////////////////////////


pip install pygame
pip install googletrans==3.1.0a0
pip install installer 

#program for translating from Russian into English

from cgitb import text
from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


#text translation function
def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)


#creating the main window
root = Tk()
root.geometry('500x340')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = '#555'

#class
translator = Translator()

#dictionary with languages
languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

#top Frame
header_frame = Frame(root, bg='#783')

#stretch in length
header_frame.pack(fill=X)

#central arrow Frame
header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

#first left Combobox
comboOne = ttk.Combobox(header_frame,values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0, pady=0, padx=0)

#Label with an arrow at the top
label = Label(header_frame, fg='black', bg='#783', font='Arial 20 bold',text='=>')
label.grid(row=0, column=1,pady=2)

#Text from the left Text input
lab=Label(root, text='Text input\nВвод текста', font='Arial 10 bold',bg='#783')
lab.place(x=0,y=50)

#Text from the left Output text
lab1=Label(root, text='Output text\nВывод текста', font='Arial 9 bold',bg='#783')
lab1.place(x=0,y=160)

#second right Combobox
comboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='raedonly')
#Текущий/current/the language is automatically set to combo box
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

#first text entry window
t_input = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_input.place(x=90, y=50)

#text translation button
btn = Button(root, width=40, height=2, text='__________Перевести => Translate__________', font='Arial 15 bold',bg='#783', command=translate)
btn.place(x=5,y=270)

#second window for displaying the translated text
t_output = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_output.place(x=90, y=160)

#program cycle
root.mainloop()

from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)



root = Tk()
root.geometry('500x350')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = 'black'
translator = Translator()

languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

header_frame = Frame(root, bg='black')
header_frame.pack(fill=X)

header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

comboOne = ttk.Combobox(header_frame,
                        values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0)



label = Label(header_frame, fg='white', bg='black', font='Arial 20 bold',text='->')
label.grid(row=0, column=1)

comboTwo = ttk.Combobox(header_frame,
                        values=[lang for lang in languages], state='raedonly')
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

t_input = Text(root, width=35, height=5, font='Arial 12 bold')
t_input.pack(padx=20)

btn = Button(root, width=45, text='Перевести', command=translate)
btn.pack()

t_output = Text(root, width=45, height=5, font='Arial 20 bold')
t_output.pack(pady=20)

root.mainloop()


from ast import Delete
from cgitb import text
from faulthandler import disable
from pickle import GLOBAL
import time
from tkinter import *
a = 0
f = 300

root = Tk()
root.title('Прога')
root.geometry('200x200+10+10')
root.resizable(0,0)

def bot():

    global f , a

    f = f+1

    btn.config(text=f, bg='#'+str(f+0))
    
    #entry.delete('0', END)
    entry.insert(END, '')
    #backgroundcolor = ' Black'
       #btn.config(text=f, bg='#'+str(f+0),background='yellow') 
    #time.sleep(0.2)
    while True:
        a = a + 1
        #time.sleep(1)
        entry.insert(END, a)
        
        if a >= 10:
            break
#time.sleep(10)

def gh():
    btn.config(state=['active'],fg='green',bd='10')

def dis():
    btn.config(state=['disabled'],fg='red',bg='gray',bd='0')
    

    
btn1 = Button(root, text='  Active  ',command=gh)
btn1.pack()

btn2 = Button(root, text='Disabled',command=dis)
btn2.pack()

btn = Button(root, text='Button', font='Arial 10 bold', padx=10, pady=10, bg='#562',
                                    bd='10',state=['disabled'],  fg='black',  command=bot)
btn.pack()

entry = Entry(root,width=30)
entry.pack()

root.mainloop()


from tkinter import *
import pyautogui

def b1(event):
    root.title('Левая кнопка мыши')


def b3(event):
    root.title('Right кнопка мыши')

def movemouse(event):
    #pyautogui.size()
    pyautogui.position()
    x = event.x
    y = event.y
    s = "движение мышью {} x {}" .format(x,y)
    root.title(s) 

   

root = Tk()

root.configure(bg='black')

btn = Button(text='Mause',command=movemouse)
btn.pack()

root.bind('<Button-1>', b1)
root.bind('<Button-3>', b3)
root.bind('<Motion>', movemouse)

root.mainloop()


from tkinter import * 


def event_info(event):
    print(type(event))
    print(event)
    print(event.time)
    print(event.x_root)
    print(event.y_root)


root = Tk()
root.bind('a', event_info)


root.mainloop()



from cgitb import text
from tkinter import *
from turtle import right


def left_click(event):
    frame1.config(bg='red')
    frame2.config(bg='white')
    frame3.config(bg='white')

    root.config(bg='white')
    root.title('Left_click')

def mid_click(event):
    frame1.config(bg='white')
    frame2.config(bg='red')
    frame3.config(bg='white')

    root.title('Middle_click')

def right_click(event):
    frame1.config(bg='white')
    frame2.config(bg='white')
    frame3.config(bg='red')

    root.title('Right_click')


root = Tk()
root.config(bg='#459')
root.title('Click')

frame1 = Frame(root, width=500, height=500, bg='white')
frame2 = Frame(root, width=500, height=500, bg='white')
frame3 = Frame(root, width=500, height=500, bg='white') 

frame1.grid(row=0, column=0, padx = 1, pady = 1)
frame2.grid(row=0, column=1, padx = 1, pady = 1)
frame3.grid(row=0, column=2, padx = 1, pady = 1)

root.bind('<Button-1>', left_click)
root.bind('<Button-2>', mid_click)
root.bind('<Button-3>', right_click)

root.mainloop()


from cgitb import text
from tkinter import *
from turtle import right


def left_click(event):
    frame1.config(bg='red')
    frame2.config(bg='white')
    frame3.config(bg='white')

    root.title('Left_click')

  

def mid_click(event):
    frame1.config(bg='white')
    frame2.config(bg='red')
    frame3.config(bg='white')
    root.title('Middle_click')

    

def right_click(event):
    frame1.config(bg='white')
    frame2.config(bg='white')
    frame3.config(bg='red')
    root.title('Right_click')

    


root = Tk()
root.config(bg='#459')
root.title('Click')

frame1 = Frame(root, width=500, height=500, bg='white')
frame2 = Frame(root, width=500, height=500, bg='white')
frame3 = Frame(root, width=500, height=500, bg='white') 

frame1.grid(row=0, column=0, padx = 1, pady = 1)
frame2.grid(row=0, column=1, padx = 1, pady = 1)
frame3.grid(row=0, column=2, padx = 1, pady = 1)

root.bind('<Button-1>', left_click)
root.bind('<Button-2>', mid_click)
root.bind('<Button-3>', right_click)

root.mainloop()






pip install python-tk
>>> import tkinter
>>> tkinter._test()
import Tkinter as tk

from tkinter import *
root = Tk()
root.title('Прога')
root.geometry('200x200')
root.resizable(0,0)
bnt = Button(root, text='Button').pack()
root.mainloop()




1
"topmost": must be -alpha, -transparentcolor, -disabled, -fullscreen, 
-toolwindow, or -topmost

from tkinter import *
root = Tk()
root['bg'] = '#fafafa'
root.title('name')

root.wm_attributes('-alpha',0.7) прозрачность
root.geometry('300x250')
root.resizable(width=False, height=False)
canvas = Canvas(root,height=300, width=250)
canvas.pack()
frame = Frame(root, bg='red')
frame.place(relx=0.15,rely=0.15,relwidth=0.7, relheigh=0.7)
title = Label(frame,text='text',bg='gray',font = 40)
title.pack()
btn = Button(frame, text='Button', bg='yellow')
btn.pack()

root.mainloop()
Russian Language Pack for Visual Studio Code  v1.71.9140935
MS-CEINTL.vscode-language-pack-ru
2


from tkinter  import *
root = Tk()

root.mainloop()

3


from tkinter import *
root = Tk()
root['bg']='#fafafa'
root.title('name')
root.wm_attributes('-alpha', 0.1)
root.wm_attributes('-fullscreen', True)
root.wm_attributes('-topmost', True)
root.mainloop()


from cgitb import text
from tkinter import *
from tkinter.tix import ButtonBox
root = Tk()
root['bg']='green'
root.title('name')
root.wm_attributes('-alpha', 0.9)
#root.wm_attributes('-fullscreen', True)
root.wm_attributes('-topmost', True)
root.geometry('300x300')
root.resizable(0,0)
a=10
d=10
c=a+d
root.title(c)
btv=Button(root,text="Serega "+  str(c))
btv.pack()
root.mainloop()

608b8b82342688f8ebfed1c85c76515a weather kye



import logging
from tkinter import *
from tkinter import font
from tkinter import messagebox
root = Tk()

def btn_click():
   # messagebox.showinfo('проверка',' сообщение')
    login = loginInput.get()
    password = passField.get()

    info_str = f'Логин: {str(login)}, Пароль: {str(password)}'
    messagebox.showinfo('Название',info_str)

    print('Some text')

root.title('name')
root['bg']='#fafafa'
root.geometry('310x305+10+100')
root.resizable(0,0)
root.wm_attributes('-alpha', 0.9)

canvas = Canvas(root,height=295,width=290,bg='gold')
canvas.pack()

frame = Frame(root, bg='red')
frame.place(relx=0.15,rely=0.15,relheight=0.7,relwidth=0.7)

title = Label(frame, text='text',bg='gray',font='Arial,40').pack()
#title.pack()
btn = Button(frame, text='Button', bg='yellow',font='Arial,20', command=btn_click)
btn.pack()
loginInput = Entry(frame,bg='white')
loginInput.pack()
passField = Entry(frame,bg='white',show='*')
passField.pack()

root.mainloop()

from logging import root
from tkinter import *
from unittest import result
from tkinter.font import Font
from urllib import request
root = Tk()

def get_weather():
    city = cityField.get()
    key ='608b8b82342688f8ebfed1c85c76515a'
    url = 'https://home.openweathermap.org/'
    params = {'APPID': key, 'q': city, 'units': 'imperial'}
    result = request.get(url,params=params) 
    weather = result.json()

    print(weather)




root['bg'] = '#fafafa'
root.title('Погода')
root.geometry('300x300+10+10')
root.resizable(0,0)

frame_top = Frame(root, bg='red',bd=5)
frame_top.place(rely=0.15,relx=0.15,relheight=0.25,relwidth=0.7)

frame_button = Frame(root,bg='green',bd=10)
frame_button.place(relx=0.15,rely=0.55,relwidth=0.7,relheight=0.25)

cityField = Entry(frame_top,bg='white')
cityField.pack()

btn = Button(frame_top, text='Просмотреть погоду', command=get_weather)
btn.pack()

info = Label(frame_button, text='Информация о погоде', bg='#ffb700')
info.pack()
root.mainloop()


from logging import root
from tkinter import *
from unittest import result
from tkinter.font import Font
from urllib import request
root = Tk()

def get_weather():
    city = cityField.get()
    key ='608b8b82342688f8ebfed1c85c76515a'
    url = 'https://home.openweathermap.org/'
    params = {'APPID': key, 'q': city, 'units': 'imperial'}
    result = request.get(url,params=params) 
    weather = result.json()

    print(weather)




root['bg'] = '#fafafa'
root.title('Погода')
root.geometry('300x300+10+10')
root.resizable(0,0)

frame_top = Frame(root, bg='red',bd=5)
frame_top.place(rely=0.15,relx=0.15,relheight=0.25,relwidth=0.7)

frame_button = Frame(root,bg='green',bd=10)
frame_button.place(relx=0.15,rely=0.55,relwidth=0.7,relheight=0.25)

cityField = Entry(frame_top,bg='white')
cityField.pack()

btn = Button(frame_top, text='Просмотреть погоду', command=get_weather)
btn.pack()

info = Label(frame_button, text='Информация о погоде', bg='#ffb700')
info.pack()
root.mainloop()


from tkinter import *
from tkinter import messagebox
import random


def no():
    messagebox.showinfo('','Спасибо за ваш выбор')
    quit()

def motionMouse(event):
    btnYes.place(x=random.randint(0,500),y=random.randint(0,500))


root = Tk()
root.geometry('600x600')
root.resizable(0,0)
root['bg'] = '#ffb700'
root.title('прог')

lab = Label(root, text='Лови кнопку',font="Arial 20 bold",bg='#555').pack()
btnYes = Button(root, text='Yes', font='Arial 20 bold',bg='red')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>',motionMouse)
btnNo = Button(root,text='No', font='Arial 20 bold', command=no).place(x=350, y=100)

root.mainloop()




from tkinter import *
from tkinter import messagebox
import random

def vihod():
    messagebox.showinfo('Quit','Quit')
    quit()

def motionMouse(event):
    btn1.place(x=random.randint(10,500), y=random.randint(150,500))

root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)
 
btn1 = Button(root, text='Button1', font='Arial 20 bold',bg='gold')
btn1.place(x=150,y=100)
btn1.bind('<Enter>', motionMouse )
btn2 = Button(root, text='Button2', font='Arial 20 bold',bg='#555', command=vihod).place(x=300,y=100)



lab1 = Label(root, text='Label1', font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 20 bold', bg='green').place(x=250 , y=5)
root.mainloop()

padx=10, pady=10 размер кнопки



from cgitb import text
from tkinter import *
from tkinter import messagebox
import random

global count
count = 100
count1 = 0

def vihod():
    #messagebox.showinfo('Quit','Quit')
    #quit()
    global count
    count += 1
    btn2.config(text='Button '+str(count+300),bg='#'+str(count+300))
    Frame1.config(bg='#'+str(count))
    root.config(bg='#'+str(count+100))
    btn1.config(text=count, bg='#'+str(count+200))
    lab1 = Label(root, text= count+400  , font='Arial 10 bold', bg='#'+str(count+400
                                                                )).place(x=150,y=75)
    if count>=110:
        lab2 = Label(root, text=count, font='Arial 20 bold', bg='red').place(x=count,y=count+50)

def motionMouse(event):
    btn1.place(x=random.randint(60,410), y=random.randint(156,530))
    global count1
    count1 += 1
    btn1.configure(text=count1)


 


root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)

Frame1 = Frame(root, bg='gold')
Frame1.place(relx=0.10,rely=0.26,relheight=0.7,relwidth=0.8)
 
btn1 = Button(root, text='Button1', font='Arial 10 bold',bg='gold', padx=30, pady=10)
btn1.place(x=150,y=100)

btn1.bind('<Enter>', motionMouse )

btn2 = Button(root, text='Button2', font='Arial 10 bold',bg='#510', command=vihod)
btn2.place(x=300,y=100)



lab1 = Label(root, text= count  , font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 10 bold', bg='green').place(x=250 , y=5)



root.mainloop()

from cgitb import text
from tkinter import *
from tkinter import messagebox
import random

global count
count = 100
count1 = 0

def vihod():
    #messagebox.showinfo('Quit','Quit')
    #quit()
    global count
    count += 1
    btn2.config(text='Button '+str(count+300),bg='#'+str(count+300))
    Frame1.config(bg='#'+str(count))
    root.config(bg='#'+str(count+100))
    btn1.config(text=count, bg='#'+str(count+200))
    lab1 = Label(root, text= count+400  , font='Arial 10 bold', bg='#'+str(count+400
                                                                )).place(x=150,y=75)
    if count>=110:
        lab2 = Label(root, text=count, font='Arial 20 bold', bg='red').place(x=count,y=count+50)

def motionMouse(event):
    btn1.place(x=random.randint(60,410), y=random.randint(156,530))
    global count1
    count1 += 1
    btn1.configure(text=count1)


 


root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)

Frame1 = Frame(root, bg='gold')
Frame1.place(relx=0.10,rely=0.26,relheight=0.7,relwidth=0.8)
 
btn1 = Button(root, text='Button1', font='Arial 10 bold',bg='gold', padx=30, pady=10)
btn1.place(x=150,y=100)

btn1.bind('<Enter>', motionMouse )

btn2 = Button(root, text='Button2', font='Arial 10 bold',bg='#510', command=vihod)
btn2.place(x=300,y=100)



lab1 = Label(root, text= count  , font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 10 bold', bg='green').place(x=250 , y=5)



root.mainloop()


import time
from tkinter import *


time.sleep(5)












= присвоение 
== сравненеие


# начало программы

#модуль turtle импортировать все
from turtle import *
#модуль время дата
from datetime import datetime
 
#функция 1
def jump(distanz, winkel=0): #прыжек winkel:хранить
    penup() #поднять перо
    right(winkel) #направо
    forward(distanz) #вперед
    left(winkel) #налево
    pendown() #опустить перо

#функция 2
def hand(laenge, spitze): # длинная, топ
    fd(laenge*1.15) #вперед
    rt(90)          #направо
    fd(spitze/2.0)  #вперед
    lt(120)         #налево
    fd(spitze)      #вперед
    lt(120)         #налево
    fd(spitze)      #вперед
    lt(120)         #налево
    fd(spitze/2.0)  #вперед

#функция 
def make_hand_shape(name, laenge, spitze):
    reset()
    jump(-laenge*0.15)
    begin_poly()                #!!!!!!
    hand(laenge, spitze)
    end_poly()                  #!!!!!!
    hand_form = get_poly()
    register_shape(name, hand_form)

#функция 
def clockface(radius):
    reset()
    pensize(3)
    for i in range(60):
        jump(radius)
        if i % 5 == 0:
            fd(25)
            jump(-radius-25)
        else:
            dot(3)
            jump(-radius)
        rt(6)

#функция 
def setup():
    global second_hand, minute_hand, hour_hand, writer
    mode("logo")
    make_hand_shape("second_hand",125, 25) #размер стрелок
    make_hand_shape("minute_hand",  130, 25) #размер стрелок
    make_hand_shape("hour_hand", 90, 25) #размер стрелок
    clockface(160)
    second_hand = Turtle()
    second_hand.shape("second_hand")
    second_hand.color("gray20", "gray80")
    minute_hand = Turtle()
    minute_hand.shape("minute_hand")
    minute_hand.color("blue1", "red1")
    hour_hand = Turtle()
    hour_hand.shape("hour_hand")
    hour_hand.color("blue3", "red3")
    for hand in second_hand, minute_hand, hour_hand:
        hand.resizemode("user")
        hand.shapesize(1, 1, 3)
        hand.speed(0)
    ht()
    writer = Turtle()
    writer.ht()
    writer.pu()
    writer.bk(85)

#функция 
def wochentag(t):
    wochentag = ["Monday", "Tuesday", "Среда",
        "Thursday", "Friday", "Saturday", "Sunday"]
    return wochentag[t.weekday()]

#функция 
def datum(z):
    monat = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "June",
             "July", "Aug.", "Sep.", "Октябрь.", "Nov.", "Dec."]
    j = z.year
    m = monat[z.month - 1]
    t = z.day
    return "%s %d %d" % (m, t, j)

#функция 
def tick():
    t = datetime.today()
    sekunde = t.second + t.microsecond*0.0000001
    minute = t.minute + sekunde/60.0
    stunde = t.hour + minute/60.0
    try:
        tracer(False)  # Terminator can occur here
        writer.clear()
        writer.home()
        writer.forward(65)
        writer.write(wochentag(t),
                     align="center", font=("Courier", 14, "bold"))
        writer.back(150)
        writer.write(datum(t),
                     align="center", font=("Courier", 14, "bold"))
        writer.forward(85)
        tracer(True)
        second_hand.setheading(6*sekunde)  # or here
        minute_hand.setheading(6*minute)
        hour_hand.setheading(30*stunde)
        tracer(True)
        ontimer(tick, 100)
    except Terminator:
        pass  # turtledemo user pressed STOP

#функция 
def main():
    tracer(False)
    setup()
    tracer(True)
    tick()
    return "EVENTLOOP"

if __name__ == "__main__":
    mode("logo")
    msg = main()
    print(msg)
    mainloop()





= присвоение 
== сравненеие


# начало программы

#модуль turtle импортировать все
from turtle import *
#модуль время дата
from datetime import datetime
 
#функция 1
def jump(distanz, winkel=0): #прыжек winkel:хранить
    penup() #поднять перо
    right(winkel) #направо
    forward(distanz) #вперед
    left(winkel) #налево
    pendown() #опустить перо

#функция 2
def hand(laenge, spitze): # длинная, топ
    fd(laenge*1.15) #вперед
    rt(90)          #направо
    fd(spitze/2.0)  #вперед
    lt(120)         #налево
    fd(spitze)      #вперед
    lt(120)         #налево
    fd(spitze)      #вперед
    lt(120)         #налево
    fd(spitze/2.0)  #вперед

#функция 
def make_hand_shape(name, laenge, spitze):
    reset()
    jump(-laenge*0.15)
    begin_poly()                #!!!!!!
    hand(laenge, spitze)
    end_poly()                  #!!!!!!
    hand_form = get_poly()
    register_shape(name, hand_form)

#функция 
def clockface(radius):
    reset()
    pensize(3)
    for i in range(60):
        jump(radius)
        if i % 5 == 0:
            fd(25)
            jump(-radius-25)
        else:
            dot(3)
            jump(-radius)
        rt(6)

#функция 
def setup():
    global second_hand, minute_hand, hour_hand, writer
    mode("logo")
    make_hand_shape("second_hand",125, 25) #размер стрелок
    make_hand_shape("minute_hand",  130, 25) #размер стрелок
    make_hand_shape("hour_hand", 90, 25) #размер стрелок
    clockface(160)
    second_hand = Turtle()
    second_hand.shape("second_hand")
    second_hand.color("gray20", "gray80")
    minute_hand = Turtle()
    minute_hand.shape("minute_hand")
    minute_hand.color("blue1", "red1")
    hour_hand = Turtle()
    hour_hand.shape("hour_hand")
    hour_hand.color("blue3", "red3")
    for hand in second_hand, minute_hand, hour_hand:
        hand.resizemode("user")
        hand.shapesize(1, 1, 3)
        hand.speed(0)
    ht()
    writer = Turtle()
    writer.ht()
    writer.pu()
    writer.bk(85)

#функция 
def wochentag(t):
    wochentag = ["Monday", "Tuesday", "Среда",
        "Thursday", "Friday", "Saturday", "Sunday"]
    return wochentag[t.weekday()]

#функция 
def datum(z):
    monat = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "June",
             "July", "Aug.", "Sep.", "Октябрь.", "Nov.", "Dec."]
    j = z.year
    m = monat[z.month - 1]
    t = z.day
    return "%s %d %d" % (m, t, j)

#функция 
def tick():
    t = datetime.today()
    sekunde = t.second + t.microsecond*0.0000001
    minute = t.minute + sekunde/60.0
    stunde = t.hour + minute/60.0
    try:
        tracer(False)  # Terminator can occur here
        writer.clear()
        writer.home()
        writer.forward(65)
        writer.write(wochentag(t),
                     align="center", font=("Courier", 14, "bold"))
        writer.back(150)
        writer.write(datum(t),
                     align="center", font=("Courier", 14, "bold"))
        writer.forward(85)
        tracer(True)
        second_hand.setheading(6*sekunde)  # or here
        minute_hand.setheading(6*minute)
        hour_hand.setheading(30*stunde)
        tracer(True)
        ontimer(tick, 100)
    except Terminator:
        pass  # turtledemo user pressed STOP

#функция 
def main():
    tracer(False)
    setup()
    tracer(True)
    tick()
    return "EVENTLOOP"

if __name__ == "__main__":
    mode("logo")
    msg = main()
    print(msg)
    mainloop()





label_result.config(text="Result = %d" % result) 

print('Enter cycle number')
n = int(input())
k = 0

for i in range(0,n):
    print('Enter the number to be divisible by 4 and not divisible by 7')
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print('The number of numbers is ', k, ' divided by 4 and not divided by 7')


n = int(input())
k = 0

for i in range(0,n):
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print(k)



'''
sp1 = ('text0','text1','text2','text3')
print(sp1)
print(sp1[2])

print(sp1[::2])
'''
s1 = {'k': 'zn','collor': 'black', 'дерево':'листик'}

print(s1)

print(s1['k'])
s1['машина'] = 'двигатель'

print(s1)

s1['collor'] = 'white'
print(s1)

del s1['дерево']

print(s1)



sp1 = ['0','1','2','3','4' ]
print(sp1)

print(sp1[3])
a = 'day0'
sp1[3] = 'сено'
sp1[0] = a
print(sp1[3])
sp1.append('width')
del sp1[1]

print(sp1)

sp2 = [221,257,88,663,744,999,65,45,2,0]
sp3 = [21,'text',2563,'text']

sp4 = [sp1, sp2, sp3]

print(sp4)

print(sp4[1][1])

sp5 = [1,2,3]
sp6 = [4,5,6]
sp7 = sp5+sp6
print(sp7)

sp8 = [5,9]
sp9 = sp8 * 10
print(sp9)

print(sp1[:2])
print(sp1[1:3])
print(sp1[::2])



#t=2+2
#t=30-16
#t=2*36
#t=100/2
#t=100//2
#t = 10 % 12
#print(t)
"""
arr = [1,2,3,4,5,6,7,8,9,10]
for i in arr:
    if i % 2 == 0:
        print(i)

"""
"""
print(0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+
      0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1)
"""




'''
a = 0.1 
for i in range(13):
    a += 0.1
print(a)


try:
    print(24 / 0)
except Exception as e:
    print(e)
DivisionByZero

'''
'''
from array import *
data = array('i',[2,5,4,0,8]) 
#data.insert(4,10)
#data.pop(0)
for i in data:
    print(i)
    print(len(data))
'''
'''

arr = [10,11,0,5,0,8,0,9,0,7,0,321]

for i in arr:
    a = i
    b = None
    if a == 0:
        print('!!!!!!!! делитель равен нулю !!!!!!!!')
    else:
        b = 345/a
        print(' результат = ' + str(b))
'''


d1 = [1,4,5]
for i in range(2):
    d2 = []
    for j in range(2):
        d2.append(1)
    d1.append(d2)

print(d1)
print(d2)
print(i)





from random import randint
for i in range(1,11):
    s=0
    print(' ',2**i)
    i*=i
    print(i,"/")


import time
from time import gmtime, strftime

x = 0
def foo():
    time.sleep(1)

while True:
    n = strftime('%a,%d %b %Y %H:%M:%S ', gmtime())
    x +=1
    print(x)
    print(n)
    foo()
   #break
t = time.gmtime(0)
print(t)






import time
from time import gmtime, strftime

x = 0
def foo():
    time.sleep(1n)

while True:
    n = strftime('%a,%d %b %Y %H:%M:%S ', gmtime())
    x +=1
    print(x)
    print(n)
    foo()
   #break
t = time.gmtime(0)
print(t)

time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)
1111111111111111111111111111111111111111111111

import time

def foo():
    time.sleep(2.5)


t0 = time.clock()
foo()
print(time.clock() - t0, 'Время обработки в секундах')

t0 = time.time()
foo()
print(time.time() - t0, 'Время стены с секундах')

111111111111111111111111111111111111111111111

#program for translating from Russian into English

from cgitb import text
from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


#text translation function
def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)


#creating the main window
root = Tk()
root.geometry('500x340')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = '#555'

#class
translator = Translator()

#dictionary with languages
languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

#top Frame
header_frame = Frame(root, bg='#783')

#stretch in length
header_frame.pack(fill=X)

#central arrow Frame
header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

#first left Combobox
comboOne = ttk.Combobox(header_frame,values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0, pady=0, padx=0)

#Label with an arrow at the top
label = Label(header_frame, fg='black', bg='#783', font='Arial 20 bold',text='=>')
label.grid(row=0, column=1,pady=2)

#Text from the left Text input
lab=Label(root, text='Text input\nВвод текста', font='Arial 10 bold',bg='#783')
lab.place(x=0,y=50)

#Text from the left Output text
lab1=Label(root, text='Text Output\nВывод текста', font='Arial 9 bold',bg='#783')
lab1.place(x=0,y=160)

#second right Combobox
comboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='raedonly')
#Текущий/current/the language is automatically set to combo box
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

#first text entry window
t_input = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_input.place(x=90, y=50)

#text translation button
btn = Button(root, width=40, height=2, text='__________Перевести => Translate__________', font='Arial 15 bold',bg='#783', command=translate)
btn.place(x=5,y=270)

#second window for displaying the translated text
t_output = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_output.place(x=90, y=160)

#program cycle
root.mainloop()






pip install pygame
pip install googletrans==3.1.0a0
pip install installer 
installer -F

#program for translating from Russian into English

from cgitb import text
from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


#text translation function
def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)


#creating the main window
root = Tk()
root.geometry('500x340')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = '#555'

#class
translator = Translator()

#dictionary with languages
languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

#top Frame
header_frame = Frame(root, bg='#783')

#stretch in length
header_frame.pack(fill=X)

#central arrow Frame
header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

#first left Combobox
comboOne = ttk.Combobox(header_frame,values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0, pady=0, padx=0)

#Label with an arrow at the top
label = Label(header_frame, fg='black', bg='#783', font='Arial 20 bold',text='=>')
label.grid(row=0, column=1,pady=2)

#Text from the left Text input
lab=Label(root, text='Text input\nВвод текста', font='Arial 10 bold',bg='#783')
lab.place(x=0,y=50)

#Text from the left Output text
lab1=Label(root, text='Output text\nВывод текста', font='Arial 9 bold',bg='#783')
lab1.place(x=0,y=160)

#second right Combobox
comboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='raedonly')
#Текущий/current/the language is automatically set to combo box
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

#first text entry window
t_input = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_input.place(x=90, y=50)

#text translation button
btn = Button(root, width=40, height=2, text='__________Перевести => Translate__________', font='Arial 15 bold',bg='#783', command=translate)
btn.place(x=5,y=270)

#second window for displaying the translated text
t_output = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_output.place(x=90, y=160)

#program cycle
root.mainloop()

from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)



root = Tk()
root.geometry('500x350')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = 'black'
translator = Translator()

languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

header_frame = Frame(root, bg='black')
header_frame.pack(fill=X)

header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

comboOne = ttk.Combobox(header_frame,
                        values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0)



label = Label(header_frame, fg='white', bg='black', font='Arial 20 bold',text='->')
label.grid(row=0, column=1)

comboTwo = ttk.Combobox(header_frame,
                        values=[lang for lang in languages], state='raedonly')
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

t_input = Text(root, width=35, height=5, font='Arial 12 bold')
t_input.pack(padx=20)

btn = Button(root, width=45, text='Перевести', command=translate)
btn.pack()

t_output = Text(root, width=45, height=5, font='Arial 20 bold')
t_output.pack(pady=20)

root.mainloop()


from ast import Delete
from cgitb import text
from faulthandler import disable
from pickle import GLOBAL
import time
from tkinter import *
a = 0
f = 300

root = Tk()
root.title('Прога')
root.geometry('200x200+10+10')
root.resizable(0,0)

def bot():

    global f , a

    f = f+1

    btn.config(text=f, bg='#'+str(f+0))
    
    #entry.delete('0', END)
    entry.insert(END, '')
    #backgroundcolor = ' Black'
       #btn.config(text=f, bg='#'+str(f+0),background='yellow') 
    #time.sleep(0.2)
    while True:
        a = a + 1
        #time.sleep(1)
        entry.insert(END, a)
        
        if a >= 10:
            break
#time.sleep(10)

def gh():
    btn.config(state=['active'],fg='green',bd='10')

def dis():
    btn.config(state=['disabled'],fg='red',bg='gray',bd='0')
    

    
btn1 = Button(root, text='  Active  ',command=gh)
btn1.pack()

btn2 = Button(root, text='Disabled',command=dis)
btn2.pack()

btn = Button(root, text='Button', font='Arial 10 bold', padx=10, pady=10, bg='#562',
                                    bd='10',state=['disabled'],  fg='black',  command=bot)
btn.pack()

entry = Entry(root,width=30)
entry.pack()

root.mainloop()


from tkinter import *
import pyautogui

def b1(event):
    root.title('Левая кнопка мыши')


def b3(event):
    root.title('Right кнопка мыши')

def movemouse(event):
    #pyautogui.size()
    pyautogui.position()
    x = event.x
    y = event.y
    s = "движение мышью {} x {}" .format(x,y)
    root.title(s) 

   

root = Tk()

root.configure(bg='black')

btn = Button(text='Mause',command=movemouse)
btn.pack()

root.bind('<Button-1>', b1)
root.bind('<Button-3>', b3)
root.bind('<Motion>', movemouse)

root.mainloop()


from tkinter import * 


def event_info(event):
    print(type(event))
    print(event)
    print(event.time)
    print(event.x_root)
    print(event.y_root)


root = Tk()
root.bind('a', event_info)


root.mainloop()



from cgitb import text
from tkinter import *
from turtle import right


def left_click(event):
    frame1.config(bg='red')
    frame2.config(bg='white')
    frame3.config(bg='white')

    root.config(bg='white')
    root.title('Left_click')

def mid_click(event):
    frame1.config(bg='white')
    frame2.config(bg='red')
    frame3.config(bg='white')

    root.title('Middle_click')

def right_click(event):
    frame1.config(bg='white')
    frame2.config(bg='white')
    frame3.config(bg='red')

    root.title('Right_click')


root = Tk()
root.config(bg='#459')
root.title('Click')

frame1 = Frame(root, width=500, height=500, bg='white')
frame2 = Frame(root, width=500, height=500, bg='white')
frame3 = Frame(root, width=500, height=500, bg='white') 

frame1.grid(row=0, column=0, padx = 1, pady = 1)
frame2.grid(row=0, column=1, padx = 1, pady = 1)
frame3.grid(row=0, column=2, padx = 1, pady = 1)

root.bind('<Button-1>', left_click)
root.bind('<Button-2>', mid_click)
root.bind('<Button-3>', right_click)

root.mainloop()


from cgitb import text
from tkinter import *
from turtle import right


def left_click(event):
    frame1.config(bg='red')
    frame2.config(bg='white')
    frame3.config(bg='white')

    root.title('Left_click')

  

def mid_click(event):
    frame1.config(bg='white')
    frame2.config(bg='red')
    frame3.config(bg='white')
    root.title('Middle_click')

    

def right_click(event):
    frame1.config(bg='white')
    frame2.config(bg='white')
    frame3.config(bg='red')
    root.title('Right_click')

    


root = Tk()
root.config(bg='#459')
root.title('Click')

frame1 = Frame(root, width=500, height=500, bg='white')
frame2 = Frame(root, width=500, height=500, bg='white')
frame3 = Frame(root, width=500, height=500, bg='white') 

frame1.grid(row=0, column=0, padx = 1, pady = 1)
frame2.grid(row=0, column=1, padx = 1, pady = 1)
frame3.grid(row=0, column=2, padx = 1, pady = 1)

root.bind('<Button-1>', left_click)
root.bind('<Button-2>', mid_click)
root.bind('<Button-3>', right_click)

root.mainloop()






pip install python-tk
>>> import tkinter
>>> tkinter._test()
import Tkinter as tk

from tkinter import *
root = Tk()
root.title('Прога')
root.geometry('200x200')
root.resizable(0,0)
bnt = Button(root, text='Button').pack()
root.mainloop()




1
"topmost": must be -alpha, -transparentcolor, -disabled, -fullscreen, 
-toolwindow, or -topmost

from tkinter import *
root = Tk()
root['bg'] = '#fafafa'
root.title('name')

root.wm_attributes('-alpha',0.7) прозрачность
root.geometry('300x250')
root.resizable(width=False, height=False)
canvas = Canvas(root,height=300, width=250)
canvas.pack()
frame = Frame(root, bg='red')
frame.place(relx=0.15,rely=0.15,relwidth=0.7, relheigh=0.7)
title = Label(frame,text='text',bg='gray',font = 40)
title.pack()
btn = Button(frame, text='Button', bg='yellow')
btn.pack()

root.mainloop()
Russian Language Pack for Visual Studio Code  v1.71.9140935
MS-CEINTL.vscode-language-pack-ru
2


from tkinter  import *
root = Tk()

root.mainloop()

3


from tkinter import *
root = Tk()
root['bg']='#fafafa'
root.title('name')
root.wm_attributes('-alpha', 0.1)
root.wm_attributes('-fullscreen', True)
root.wm_attributes('-topmost', True)
root.mainloop()


from cgitb import text
from tkinter import *
from tkinter.tix import ButtonBox
root = Tk()
root['bg']='green'
root.title('name')
root.wm_attributes('-alpha', 0.9)
#root.wm_attributes('-fullscreen', True)
root.wm_attributes('-topmost', True)
root.geometry('300x300')
root.resizable(0,0)
a=10
d=10
c=a+d
root.title(c)
btv=Button(root,text="Serega "+  str(c))
btv.pack()
root.mainloop()

608b8b82342688f8ebfed1c85c76515a weather kye



import logging
from tkinter import *
from tkinter import font
from tkinter import messagebox
root = Tk()

def btn_click():
   # messagebox.showinfo('проверка',' сообщение')
    login = loginInput.get()
    password = passField.get()

    info_str = f'Логин: {str(login)}, Пароль: {str(password)}'
    messagebox.showinfo('Название',info_str)

    print('Some text')

root.title('name')
root['bg']='#fafafa'
root.geometry('310x305+10+100')
root.resizable(0,0)
root.wm_attributes('-alpha', 0.9)

canvas = Canvas(root,height=295,width=290,bg='gold')
canvas.pack()

frame = Frame(root, bg='red')
frame.place(relx=0.15,rely=0.15,relheight=0.7,relwidth=0.7)

title = Label(frame, text='text',bg='gray',font='Arial,40').pack()
#title.pack()
btn = Button(frame, text='Button', bg='yellow',font='Arial,20', command=btn_click)
btn.pack()
loginInput = Entry(frame,bg='white')
loginInput.pack()
passField = Entry(frame,bg='white',show='*')
passField.pack()

root.mainloop()

from logging import root
from tkinter import *
from unittest import result
from tkinter.font import Font
from urllib import request
root = Tk()

def get_weather():
    city = cityField.get()
    key ='608b8b82342688f8ebfed1c85c76515a'
    url = 'https://home.openweathermap.org/'
    params = {'APPID': key, 'q': city, 'units': 'imperial'}
    result = request.get(url,params=params) 
    weather = result.json()

    print(weather)




root['bg'] = '#fafafa'
root.title('Погода')
root.geometry('300x300+10+10')
root.resizable(0,0)

frame_top = Frame(root, bg='red',bd=5)
frame_top.place(rely=0.15,relx=0.15,relheight=0.25,relwidth=0.7)

frame_button = Frame(root,bg='green',bd=10)
frame_button.place(relx=0.15,rely=0.55,relwidth=0.7,relheight=0.25)

cityField = Entry(frame_top,bg='white')
cityField.pack()

btn = Button(frame_top, text='Просмотреть погоду', command=get_weather)
btn.pack()

info = Label(frame_button, text='Информация о погоде', bg='#ffb700')
info.pack()
root.mainloop()


from logging import root
from tkinter import *
from unittest import result
from tkinter.font import Font
from urllib import request
root = Tk()

def get_weather():
    city = cityField.get()
    key ='608b8b82342688f8ebfed1c85c76515a'
    url = 'https://home.openweathermap.org/'
    params = {'APPID': key, 'q': city, 'units': 'imperial'}
    result = request.get(url,params=params) 
    weather = result.json()

    print(weather)




root['bg'] = '#fafafa'
root.title('Погода')
root.geometry('300x300+10+10')
root.resizable(0,0)

frame_top = Frame(root, bg='red',bd=5)
frame_top.place(rely=0.15,relx=0.15,relheight=0.25,relwidth=0.7)

frame_button = Frame(root,bg='green',bd=10)
frame_button.place(relx=0.15,rely=0.55,relwidth=0.7,relheight=0.25)

cityField = Entry(frame_top,bg='white')
cityField.pack()

btn = Button(frame_top, text='Просмотреть погоду', command=get_weather)
btn.pack()

info = Label(frame_button, text='Информация о погоде', bg='#ffb700')
info.pack()
root.mainloop()


from tkinter import *
from tkinter import messagebox
import random


def no():
    messagebox.showinfo('','Спасибо за ваш выбор')
    quit()

def motionMouse(event):
    btnYes.place(x=random.randint(0,500),y=random.randint(0,500))


root = Tk()
root.geometry('600x600')
root.resizable(0,0)
root['bg'] = '#ffb700'
root.title('прог')

lab = Label(root, text='Лови кнопку',font="Arial 20 bold",bg='#555').pack()
btnYes = Button(root, text='Yes', font='Arial 20 bold',bg='red')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>',motionMouse)
btnNo = Button(root,text='No', font='Arial 20 bold', command=no).place(x=350, y=100)

root.mainloop()




from tkinter import *
from tkinter import messagebox
import random

def vihod():
    messagebox.showinfo('Quit','Quit')
    quit()

def motionMouse(event):
    btn1.place(x=random.randint(10,500), y=random.randint(150,500))

root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)
 
btn1 = Button(root, text='Button1', font='Arial 20 bold',bg='gold')
btn1.place(x=150,y=100)
btn1.bind('<Enter>', motionMouse )
btn2 = Button(root, text='Button2', font='Arial 20 bold',bg='#555', command=vihod).place(x=300,y=100)



lab1 = Label(root, text='Label1', font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 20 bold', bg='green').place(x=250 , y=5)
root.mainloop()

padx=10, pady=10 размер кнопки



from cgitb import text
from tkinter import *
from tkinter import messagebox
import random

global count
count = 100
count1 = 0

def vihod():
    #messagebox.showinfo('Quit','Quit')
    #quit()
    global count
    count += 1
    btn2.config(text='Button '+str(count+300),bg='#'+str(count+300))
    Frame1.config(bg='#'+str(count))
    root.config(bg='#'+str(count+100))
    btn1.config(text=count, bg='#'+str(count+200))
    lab1 = Label(root, text= count+400  , font='Arial 10 bold', bg='#'+str(count+400
                                                                )).place(x=150,y=75)
    if count>=110:
        lab2 = Label(root, text=count, font='Arial 20 bold', bg='red').place(x=count,y=count+50)

def motionMouse(event):
    btn1.place(x=random.randint(60,410), y=random.randint(156,530))
    global count1
    count1 += 1
    btn1.configure(text=count1)


 


root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)

Frame1 = Frame(root, bg='gold')
Frame1.place(relx=0.10,rely=0.26,relheight=0.7,relwidth=0.8)
 
btn1 = Button(root, text='Button1', font='Arial 10 bold',bg='gold', padx=30, pady=10)
btn1.place(x=150,y=100)

btn1.bind('<Enter>', motionMouse )

btn2 = Button(root, text='Button2', font='Arial 10 bold',bg='#510', command=vihod)
btn2.place(x=300,y=100)



lab1 = Label(root, text= count  , font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 10 bold', bg='green').place(x=250 , y=5)



root.mainloop()

from cgitb import text
from tkinter import *
from tkinter import messagebox
import random

global count
count = 100
count1 = 0

def vihod():
    #messagebox.showinfo('Quit','Quit')
    #quit()
    global count
    count += 1
    btn2.config(text='Button '+str(count+300),bg='#'+str(count+300))
    Frame1.config(bg='#'+str(count))
    root.config(bg='#'+str(count+100))
    btn1.config(text=count, bg='#'+str(count+200))
    lab1 = Label(root, text= count+400  , font='Arial 10 bold', bg='#'+str(count+400
                                                                )).place(x=150,y=75)
    if count>=110:
        lab2 = Label(root, text=count, font='Arial 20 bold', bg='red').place(x=count,y=count+50)

def motionMouse(event):
    btn1.place(x=random.randint(60,410), y=random.randint(156,530))
    global count1
    count1 += 1
    btn1.configure(text=count1)


 


root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)

Frame1 = Frame(root, bg='gold')
Frame1.place(relx=0.10,rely=0.26,relheight=0.7,relwidth=0.8)
 
btn1 = Button(root, text='Button1', font='Arial 10 bold',bg='gold', padx=30, pady=10)
btn1.place(x=150,y=100)

btn1.bind('<Enter>', motionMouse )

btn2 = Button(root, text='Button2', font='Arial 10 bold',bg='#510', command=vihod)
btn2.place(x=300,y=100)



lab1 = Label(root, text= count  , font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 10 bold', bg='green').place(x=250 , y=5)



root.mainloop()


import time
from tkinter import *


time.sleep(5)












#формула m = p*v p плотность v обьем
#формула ml = ABLp
#формула mkp = b2(A+B)Lp
# A,B ширина сторон профиля. b толщина стенки изделия, L длина , p плотность металла
#площадь сечения 
#для листа умножаем толщину и ширину
#для трубы квадратной складываем величину сторон и умножаем на толщину стенки и умножаем на длину изделия 
# плотность = масса / обьем p=m/v
# g/cm3
# # плотность железа p=7900кг/м3 


#V = 10 #    литр = 0,01m3 

#m = 14 # кг

#p = m/V
#p = m / 0.01 #m3

#print(' плотность = ',p,' кг/м3')

#7800 m3 / 7.8 cm3 плотность железа 


#D1 внутренний диаметр кольца
#D2 внешний диаметр кольца
#T  толщина проката или проволки
#C  длина окружности
#C = pi * (D1 + T) or C = pi * (D2 - T)
#масса кольца прямоугольного сечения
# V = W * T * pi *(D + T)
# T толщина 
# W ширина h высота
# D внутренний диаметр
# масса такого кольца
# m = pi * W * T *(D + t) / 1000 * p
'''

#m масса
m1 = m2 = m3 = m4 = 100
#p плотность
p1 = 1
p2 = 1.1
p3 = 1.2
p4 = 1.3
#W высота
W1 = W2 = W3 = W4 = 10
#D диаметр
D1 = d1
D2 = d2
D3 = d3
D4 = 10
#T толщина 
T1 = t1 
T2 = t2
T3 = t3
T4 = t4


D1,D2,D3 = C / pi

#D1 = (pi * (D11 + T1)) / pi

#C1 = pi * (D11 + T1)      or      C1 = pi * (D21 - T1)
#C2 = pi * (D12 + T2)      or      C2 = pi * (D22 - T2)
#C3 = pi * (D13 + T3)      or      C3 = pi * (D23 - T3)

'''
x = 3
hh = 1*2*x*(4+5)/1000*6 #0.324
print(hh)




from math import *
import math

T = 10 #толщина
S = 1256.6370614359173 #mm2

math.pi = pi


D = 50 #mm
d = 30 #mm

D = sqrt(S / (pi/4) + (d**2))
d = sqrt(S / pi/4 + (D**2))-T*2

S = pi / 4 * (D**2 - d**2)

print('    ')
print('Площадь S 401.33846149609604: ',S)
print('Диаметр внешний D 40:         ',D)
print('Диаметр внутренний d 33:      ',d)
print('    ')


from math import *


m = float(0.06260748031999999) #масса
W = float(3.40) #высота
p = float(0.04) #плотность
D_out =float(39.72) #внешний диаметр

pi = float(3.14) #постоянная величина

V = m/p #объем
C = pi * D_out #L

D_in = float(32.92) #внутренний диаметр
T = float(3.40) #толщина

m1 = float(pi * W * T * (D_in + T) / 1000 * p) #масса

V1 = W * T * pi * (D_in + T)/1000 #объем

S = pi / 4 * ((D_in + 2 * T)**2 - D_in**2) #площадь
S1 = pi / 4 * (D_out**2 - (D_out - 2 * T)**2) #площадь
S2 = pi / 4 * (D_out**2 - D_in**2) #площадь

#D_out  = sqrt(S / (pi/4) + (D_in**2))
#D_in = sqrt(S / pi/4 + (D_out**2))-T*2

print('Масса кольца: ',m,'g/cm3')
print('Масса кольца m1: ',m1,'g/cm3')
print('Объём кольца V2: ',V,'cm3')
print('Объём кольца V1: ',V1,'cm3')
print('Площадь кольца0: ',S,'mm2')
print('Плотность кольца p: ',p,' ')
print('Высота кольца W: ',W,'mm')
print('Площадь кольца D_out: ',S1,'mm2')
print('длина кольца D_out: ',C,'mm')
print('Площадь кольца D_out D_in: ',S2,'mm2')
print('Внешний диаметр кольца: ',D_out,'mm')
print('Внутренний диаметр кольца: ',D_in,'mm')
print('Толщина кольца: ',(D_out - D_in)/2,'mm')



'''

from math import *
import math

T = 10 #толщина
S = 1256.6370614359173 #mm2

math.pi = pi


D = 50 #mm
d = 30 #mm

D = sqrt(S / (pi/4) + (d**2))
d = sqrt(S / pi/4 + (D**2))-T*2

S = pi / 4 * (D**2 - d**2)

print('    ')
print('Площадь S 401.33846149609604: ',S)
print('Диаметр внешний D 40:         ',D)
print('Диаметр внутренний d 33:      ',d)
print('    ')
'''









from math import *

D = 200
m = 415.95
m = round(m,2)
H = 3

'''
Result D: 250
Result m: 415.95
Result H: 3
Result d: 200
Result V1: 52987.5
Result S: 17662.5

'''

pi = 3.1415
p = 7.85

V = m/p*1000
V = round(V,2)

S = V / H 
S = round(S,2)

x = V * m / p * H

S2 = (pi * D**2 / 4) - S
S3 = S2/pi*4
S4 = sqrt(S3)
S4 = round(S4,2)

print(' ')
print('Result D:',D)
print('Result d:',S4)
print('Result H:',H)
print('Result V:',V)
print('Result m:',m)
print('Result S:',S)
print(' ')
print('Result x',x)
print('Result S2',S2)
print('Result S3',S3)
print(' ')

'''
 
Result D: 250
Result d: 200.03
Result H: 3
Result V: 52987.26
Result m: 415.95
Result S: 17662.42

Result x 8422949.349171974
Result S2 31423.5175
Result S3 40010.84513767309


Result D: 200
Result d: 132.33
Result H: 3
Result V: 52987.26
Result m: 415.95
Result S: 17662.42

Result x 8422949.349171974
Result S2 13752.580000000002
Result S3 17510.845137673088
'''

///////////////////////////////////////


D = 250
p = 1.14 #Железо 7.8 PUR 1.14 Капролон 1.16 Паронит 1.2
H = 3
d = 200

T = (D - d)/2
pi = 3.14

m = pi * H * T * (d + T) / 1000 * p
m = round(m,7)

V1 = (H * T * pi * (d + T)/1000)*1000
V1 = round(V1,2)

S = pi / 4 * ((d + 2 * T)**2 - d**2)
S = round(S,2)


print(' D_1.0.3 ')
print('Result p:',p)
print('Result D:',D)
print('Result m:',m)
print('Result H:',H)
print('Result d:',d)
print('Result V1:',V1)
print('Result S:',S)

print(' ')



///////////////////////////////////////

from math import *

D = 133
m = 60.40575
m = round(m,2)
H = 3
p = 1.2 #Железо 7.8 PUR 1.14 Капролон 1.16 Паронит 1.2
'''
 D_1.0.3 
Result p: 1.14
Result D: 250
Result m: 60.40575
Result H: 3
Result d: 200
Result V1: 52987.5
Result S: 17662.5
-----------------
Result D: 250
Result d: 200.02
Result H: 3
Result V: 52991.23
Result m: 60.41
Result S: 17663.74

Result x 8424211.063947368
Result S2 31422.1975
Result S3 40009.164411905134

Result D: 200
Result d: 133.78
Result H: 3
Result V: 52077.59
Result m: 60.41
Result S: 17359.2

Result x 8136225.548017241
Result S2 14055.8
Result S3 17896.928219003657
'''


pi = 3.1415


V = m/p*1000
V = round(V,2)

S = V / H 
S = round(S,2)

x = V * m / p * H

S2 = (pi * D**2 / 4) - S
S3 = S2/pi*4
S4 = sqrt(S3)
S4 = round(S4,2)


print('Result p:',p)
print(' ')
print('Result D:',D)
print('Result d:',S4)
print('Result H:',H)
print('Result V:',V)
print('Result m:',m)
print('Result S:',S)
print(' ')
print('Result x',x)
print('Result S2',S2)
print('Result S3',S3)
print(' ')

'''

Result D: 132
Result H: 3
Result V: 52987.26
Result m: 415.95
Result S: 17662.42

Result x 8422949.349171974
Result S2 -3978.0459999999966
Result S3 -5065.154862326909



Result D: 200
Result H: 3
Result V: 52987.26
Result m: 415.95
Result S: 17662.42

Result x 8422949.349171974  
Result S2 13752.580000000002
Result S3 17510.845137673088

'''


//////////////////////////////////////








 

40±2 кг/м3 для панелей 0.04 g/cm3 https://allcalc.ru/converter/gcm3-gm3
килограмм на кубический метр / грамм на кубический сантиметр
40 кг/м3 = 0.04 г/см3
40 / 1000 = 0.04

30±2 кг/м3 для плит


Тип кольца 
внутренний диаметр 32,92
высота 3,40
толщина 3,40
материал PUR p 0.04 g/cm3 

m = pi * W * T * (D + T) /1000 * p
W — ширина проката,
D — внутренний диаметр кольца.
T — толщина

m = 3.14 * 3,40 * 3.40 * (32,92 + 3,40) /1000 * 0.04


Масса тела зависит от того, сколько это тело съело. Шутка. На самом деле нам надо его (тела) объем V умножить на плотность материала, из которого оно сделано rho (см. таблицы плотностей):
m~=~V~*~rho
Для вычисления объема кольца или круглого звена нужно площадь сечения проката или проволоки умножить на длину окружности кольца.
Площадь сечения различных профилей мы вычисляли в статье «Масса проволоки, прутка, проката». А длина окружности кольца вычисляется по одной из двух формул: C~=~pi~*~(D1~+~T) или C~=~pi~*~(D2~-~T), где D1 — внутренний диаметр кольца, D2 — внешний диаметр кольца, T — толщина проката или проволоки.

Примечание. В приведенных ниже формулах все размеры измеряются в миллиметрах, а плотность — в граммах на кубический сантиметр.
Буквой pi обозначено отношение длины окружности к ее диаметру, составляющее примерно 3,14.

1. Масса кольца прямоугольного сечения
Кольцо прямоугольного сеченияОбъем кольца: V~=~W~*~T~*~pi~*~(D~+~T), где T — толщина проката, W — ширина проката, D — внутренний диаметр кольца.
Масса такого кольца:

m~=~{{pi~*~W~*~T~*~(D~+~T)}/1000}~*~rho

S = pi * ((R*R) - (r*r)
R — внешний радиус кольца
r — внутренний радиус кольца.

S = pi / 4 * ((D*D) - (d*d))

D — внешний диаметр кольца, 
d — внутренний диаметр кольца.

https://max-calc.ru/Kalkulyator/Ploschad/Kolca.html

from  math import * 


'''
Диаметр (Din): 32.92 мм
Толщина (T): 3.40 мм

Площадь (S) = 387.94899 мм²

S = pi/4 *((Din + 2*T)**2 - Din**2)

Где: Din - внутренний диаметр, 
T - толщина, pi - 3,14.


S = π/4 * (Dout**2 - (Dout - 2T)**2)
Где: Dout - внешний диаметр, 
T - толщина, pi - 3,14.


S = pi / 4 * (Dout**2 - Din**2)


pi = float(3.14) #постоянная величена
W = float(3.40) #высота
Din = float(32.92) #внутренний диаметр
Dout = float(39.72) #внешний диаметр
T = float(3.40) #толщина
p = float(0.04) #плотность
m = float(pi * W * T * (Din + T) /1000 * p) #масса

V = W * T * pi * (Din + T)  #объём
S = pi / 4 * ((Din + 2*T)**2 - Din**2) #площадь
S1 = pi / 4 * (Dout**2 - (Dout - 2*T)**2) #площадь
S2 = pi / 4  * (Dout**2 -  Din**2) #площадь

print('Масса кольца: ',m,'g/cm3 ')
print('Объём кольца: ',V,'см3 ')
print('Площадь кольца Din: ',S,'mm2 ')
print('Площадь кольца Dout: ',S1,'mm2 ')
print('Площадь кольца Dout Din: ',S2,'mm2 ')
print('Внешний диаметр кольца : ',Dout,'mm ')
print('Внутренний диаметр кольца : ',Din,'mm ')
print('толщина кольца: ',(Dout-Din)/2 )


        #493.952  589.7744
 #387.75232  0.785                #1083.7264
#S =        pi / 4  * (Dout**2 -  Din**2)

Doutt = sqrt( 589.7744)
rt = 1083.7264 - 493.952
we = pi /4
qw = S / 0.785

print(Doutt)
#Din**2 1083.7264    493.952 #S / (pi / 4)




#S = pi * ((R*R) - (r*r)
#S = pi / 4 * ((Din*Din) - (Dout*Dout))


'''

from math import *

m = 0.591576
pi = 3.14
H = 1
D = 10
p = 7.85
V = m/p
S = V / H
V * m / p * H

d = sqrt(((D**2) - (V * m / p * H) / (pi / 4)))

#S = Sn - Sv = pi * D**2 / 4 - pi * d**2 / 4
#x = ((3.1415 * 30**2) / 4) - ((3.1415 * 6**2) / 4)
x =((((pi * D**2) / 4)-V *1000 - (pi/ 4))/4)*(pi/ 4)


print('Result d:',d)
print('Result V:',V)
print('Result S:',S)
print('d',x)
'''
p = m / V
V = m / p
V = S * H
S = V / H
S = Sn - Sv = pi * D**2 / 4 - pi * d**2 / 4
V * m / p * H = pi / 4 * (D**2 - d**2)


'''
'''
x1 = ((3.1415 * 30**2) / 4)
x2 = ((3.1415 * 6**2) / 4)
x3 = 6**2
x4 = 3.1415 / 4
x5 = x1 -x
x6 = x5 -x4
x7 = x6/4
x8 = x7 *x4
'''

# Cu=8900 кг/м3


///////////////////////////////////////


D = 250
p = 7.85
H = 3
d = 200

T = (D - d)/2
pi = 3.14

m = pi * H * T * (d + T) / 1000 * p
m = round(m,2)
V1 = H * T * pi * (d + T)/1000
V1 = round(V1,2)
'''
V2 = m / p
m1 = V1 / p
m2 = V2 / p
'''
S = pi / 4 * ((d + 2 * T)**2 - d**2)
S = round(S,2)

'''
S1 = pi / 4 * (D**2 - (D - 2 * T)**2)
S2 = pi / 4 * (D**2 - d**2)
C1 = pi * D
C2 = pi * (D - T)
C3 = pi * (d + T)
'''
print(' ')
print('Result D:',D)
print('Result m:',m)
print('Result H:',H)
print('Result d:',d)
print('Result V1:',V1)
print('Result S:',S)

print(' ')

'''
print('')

#print('высота',H,'mm')
#print('pi',pi,' ')
#print('толщина T:',T,'mm')
#print('плотность',p,'g/cm3')
#print('наружный диаметр',D,'mm')
#print('внутренний диаметр',d,'mm')
#print('')
print('масса m:',m,'g')
print('')
#print('масса m1:',m1,'g')
#print('масса',m2,'g')
#print('обьем V1:',V1,'mm3')
print('обьем V2:',V2,'mm3')
print('площадь S:',S,'mm2')
#print('площадь',S1,'mm2')
#print('площадь',S2,'mm2')
#print('')
#print('длина окружности',C1,'mm')
#print('')
#print('длина окружности',C2,'mm')
#print('длина окружности',C3,'mm')

print('')
'''


//////////////////////////////////////

from math import *

D = 250
m = 415.95
m = round(m,2)
H = 3

pi = 3.1415
p = 7.85

V = m/p*1000
V = round(V,2)

S = V / H 
S = round(S,2)

x = V * m / p * H

S2 = (pi * D**2 / 4) - S
S3 = S2/pi*4
S4 = sqrt(S3)
S4 = round(S4,2)

print(' ')
print('Result D:',D)
print('Result d:',S4)
print('Result H:',H)
print('Result V:',V)
print('Result m:',m)
print('Result S:',S)
print(' ')








///////////////////////////////////////


from tkinter import *
import turtle
from math import *
import math
import re
from functools import partial



def is_valid(newval):
    return re.match("^\\d{0,11}$", newval) is not None



def show(lb4,ent1,ent2):
        D  = (ent1.get()) # диаметр
        t  = (ent2.get()) # толщина
       
        math.pi = pi
        print(int(t)+int(D))
        S = pi / 4 * ((int(D)**2) - ((int(D) - 2 * int(t))**2))
          
        lb4["text"] = S , 'mm2'
        #lb4.config(text="Result = %d" % result)  
        return  



t = Tk()
t.title('Пдощадь круга')
t.geometry('500x400+10+10')

number1 = StringVar()  
number2 = StringVar() 

check = (t.register(is_valid), "%P")

can = Canvas(t, width=250, height=250)
can.place(x=200,y=100)

can.create_line(10,50,100,50)
can.create_line(35,10,50,30)
can.create_oval(10,100,100,10)
can.create_oval(30,80,80,30)

lb1 = Label(text='Площадь кольца через толшину и внешний диаметр' )
lb1.place(x=0,y=5)

lb2 = Label(text='Диаметр D')
lb2.place(x=30,y=25)

lb3 = Label(text='Толшинa T')
lb3.place(x=30,y=63)

lb4 = Label(text='Площадь: ')
lb4.place(x=200,y=63)

ent1 = Entry(validate="key", validatecommand=check,textvariable=number1)
ent1.place(x=30,y=45)

ent2 = Entry(validate="key", validatecommand=check,textvariable=number2)
ent2.place(x=30,y=85)

show = partial(show, lb4, number1, number2) 

btn = Button(text='Вычислить',command=show)
btn.place(x=50,y=115)





t.mainloop()


 


import tkinter as tk  
from functools import partial  
   
   
def show(label_result, n1, n2):  
    num1 = (n1.get())  
    num2 = (n2.get())  
    result = int(num1)+int(num2)  
    label_result.config(text="Result = %d" % result)  
    return  
   
root = tk.Tk()  
root.geometry('400x200+100+200')  
  
root.title('Calculator')  
   
number1 = tk.StringVar()  
number2 = tk.StringVar()  
  
labelNum1 = tk.Label(root, text="A").grid(row=1, column=0)  
  
labelNum2 = tk.Label(root, text="B").grid(row=2, column=0)  
  
labelResult = tk.Label(root)  
  
labelResult.grid(row=7, column=2)  
  
entryNum1 = tk.Entry(root, textvariable=number1).grid(row=1, column=2)  
  
entryNum2 = tk.Entry(root, textvariable=number2).grid(row=2, column=2)  
  
show = partial(show, labelResult, number1, number2)  
  
buttonCal = tk.Button(root, text="Calculate", command=show).grid(row=3, column=0)  
  
root.mainloop()  

from tkinter import *
import turtle
from math import *
import math
import re
from functools import partial



def is_valid(newval):
    return re.match("^\\d{0,11}$", newval) is not None



def show(lb4,ent1,ent2):
        D = (ent1.get()) # диаметр
        t = (ent2.get()) # толщина
        og = int(D) + int(t)
        math.pi = pi
        S = pi / 4 * ((D**2) - ((D - 2 * t)**2))
        #lb4.config(text=''+og)  
        lb4["text"] = og , 'mm2'
        return  



t = Tk()
t.title('Пдощадь круга')
t.geometry('500x400+10+10')

number1 = StringVar()  
number2 = StringVar() 

check = (t.register(is_valid), "%P")

can = Canvas(t, width=250, height=250)
can.place(x=200,y=100)

can.create_line(10,50,100,50)
can.create_line(35,10,50,30)
can.create_oval(10,100,100,10)
can.create_oval(30,80,80,30)

lb1 = Label(text='Площадь кольца через толшину и внешний диаметр' )
lb1.place(x=0,y=5)

lb2 = Label(text='Диаметр D')
lb2.place(x=30,y=25)

lb3 = Label(text='Толшинa T')
lb3.place(x=30,y=63)

lb4 = Label(text='Площадь: ')
lb4.place(x=200,y=63)

ent1 = Entry(validate="key", validatecommand=check,textvariable=number1)
ent1.place(x=30,y=45)

ent2 = Entry(validate="key", validatecommand=check,textvariable=number2)
ent2.place(x=30,y=85)

show = partial(show, lb4, number1, number2) 

btn = Button(text='Вычислить',command=show)
btn.place(x=50,y=115)





t.mainloop()


column — это номер столбца, отсчитывается с нуля;
row — это номер строки, отсчитывается с нуля;
columnspan — указывает число столбцов, занимаемых элементом;
rowspan — указывает число строк;
ipadx и ipady — подразумеваются отступы по горизонтали и вертикали от границ компонента до текста компонента;
padx и pady — аналогичные отступы, но от границ ячейки грида до границ компонента;
sticky — определяет выравнивание элемента в ячейке в случае, когда ячейка больше компонента.
import turtle

t = turtle.Pen()

q = 100
w = 100
e = 10
r = 0

for i in range(72):
    t.speed(11)
    t.forward(200)
    t.left(185)
    t.forward(200)
    '''
    t.goto(q,w)
    t.goto(e,r)
    q = q + 10
    w = w + 10
    e = e + 10
    r = r + 10



print(q,w,e,r)
 '''   
    
   
    
    
    #if k % 1 == 0:
        
        
   
   
    


input()





import turtle
t = turtle.Pen()
t.forward(100)
t.left(90)
t.forward(100)
t.left(90)
t.forward(100)
t.left(90)
t.forward(100)

t.up()
t.goto(250,250)
t.down()
t.color( "green")
t.pensize(3)
t.circle(100)
t.reset()
t.setx(10)
t.sety(10)




input()


print('Enter cycle number')
n = int(input())
k = 0

for i in range(0,n):
    print('Enter the number to be divisible by 4 and not divisible by 7')
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print('The number of numbers is ', k, ' divided by 4 and not divided by 7')


n = int(input())
k = 0

for i in range(0,n):
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print(k)



'''
sp1 = ('text0','text1','text2','text3')
print(sp1)
print(sp1[2])

print(sp1[::2])
'''
s1 = {'k': 'zn','collor': 'black', 'дерево':'листик'}

print(s1)

print(s1['k'])
s1['машина'] = 'двигатель'

print(s1)

s1['collor'] = 'white'
print(s1)

del s1['дерево']

print(s1)



sp1 = ['0','1','2','3','4' ]
print(sp1)

print(sp1[3])
a = 'day0'
sp1[3] = 'сено'
sp1[0] = a
print(sp1[3])
sp1.append('width')
del sp1[1]

print(sp1)

sp2 = [221,257,88,663,744,999,65,45,2,0]
sp3 = [21,'text',2563,'text']

sp4 = [sp1, sp2, sp3]

print(sp4)

print(sp4[1][1])

sp5 = [1,2,3]
sp6 = [4,5,6]
sp7 = sp5+sp6
print(sp7)

sp8 = [5,9]
sp9 = sp8 * 10
print(sp9)

print(sp1[:2])
print(sp1[1:3])
print(sp1[::2])



#t=2+2
#t=30-16
#t=2*36
#t=100/2
#t=100//2
#t = 10 % 12
#print(t)
"""
arr = [1,2,3,4,5,6,7,8,9,10]
for i in arr:
    if i % 2 == 0:
        print(i)

"""
"""
print(0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+
      0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1)
"""




'''
a = 0.1 
for i in range(13):
    a += 0.1
print(a)


try:
    print(24 / 0)
except Exception as e:
    print(e)
DivisionByZero

'''
'''
from array import *
data = array('i',[2,5,4,0,8]) 
#data.insert(4,10)
#data.pop(0)
for i in data:
    print(i)
    print(len(data))
'''
'''

arr = [10,11,0,5,0,8,0,9,0,7,0,321]

for i in arr:
    a = i
    b = None
    if a == 0:
        print('!!!!!!!! делитель равен нулю !!!!!!!!')
    else:
        b = 345/a
        print(' результат = ' + str(b))
'''


d1 = [1,4,5]
for i in range(2):
    d2 = []
    for j in range(2):
        d2.append(1)
    d1.append(d2)

print(d1)
print(d2)
print(i)





from random import randint
for i in range(1,11):
    s=0
    print(' ',2**i)
    i*=i
    print(i,"/")

num  = 1
num_day = 3
st = 'Посетителей: %s человек за %s дней'
if num == 1 and num_day ==3:
    st1 = 'Посетитель: %s человек за %s дня'
    print(st1 %(num,num_day))
elif  num >= 1 and num_day >=3:
    st = 'Посетителей: %s человек за %s дней'
    print(st %(num,num_day))


st1 ="text"
st2 ='text2'
st3 ='text " text"'
st4 =" text 'text222'"
st5 ='''text 'text' "text"'''
st6 =''' text
2 text'''

st7 = 'test\'text\''
st8 = 'text\'text'
st9 = 'text'
st10 = 'text'
st11 = st9+st10
st12 = 'text'
st13 = st12*10

#num = 200
#st14 = 'text %s text'

#print(st14 % num)
'''
num = 200
num_day = 365
st16 = 'Посетителей %s за %s дней'
print(st16 % (num, num_day))

'''
st20 = 'text '
print(st20[2])
print(st20[:1:])


a = 2+2
b = 2*2
c = 20-10
v = 100/20.368
n = 100//5.31
d = 20+5*2-20+66/2
df = 20+(5*2)-(20+66/2)
z = 50
z = 10
z = 20+365*10-365*2
f_c = 20
cop = 15
ykr = 2
day = 365

qw = f_c+cop*day-day*ykr

name = 'vasy'

print(name)
'''

arr = [25,36,95,14,75,65,28,44]


print(arr[5])

print(arr[6])

'''

# [start: stop: step]
'''
arr = [25,36,95,14,75,65,28,44]

arr_b = arr[:]

print(arr_b)

'''
'''
arr = [25,36,95,14,75,65,28,44]

arr_b = arr[::2]

print(arr_b)

'''
'''
arr = [25,36,95,14,75,65,28,44]

arr_b = arr[3:6]

print(arr_b)
'''

arr = [25,36,95,14,75,65,28,44]

print(arr[3:6])
print(arr[3:])
print(arr[:3])
print(arr[::2])




import time

a = 0

while True:
    #a += 1
    a = a + 1
    print(a)
    print('ждем 5 сек')
    time.sleep(5)
    if a>10:
        break
print('exit')
time.sleep(2)


"""
for i in range(5):
    print(i)
"""
"""
ar = ['fgf', 'hjhkjkj','gfgfgf','fgf', 'hjhkjkj','gfgfgf'] 

for i in range(6):
    print(ar[i])
"""
"""
ar = ['2', 'hjhkjkj','gfgfgf','fgf', 'hjhkjkj','gfgfgf', 'hjhkjkj','gfgfgf','fgf', 'hjhkjkj','5'] 

for i in range(len(ar)):
    print(ar[i])

"""
'''
for i in range(1,31):
    print(i)
'''
'''
for i in range(-13,-10):
    print(i)
'''
for i in range(10,110,10):
    print(i)



import tkinter as tk
from collections import namedtuple

User = namedtuple("User", ["username", "password", "user_type"])

class UserForm(tk.Toplevel):
    def __init__(self, parent, user_type):
        super().__init__(parent)
        self.username = tk.StringVar()
        self.password = tk.StringVar()
        self.user_type = user_type

        label = tk.Label(self, text="Создать пользователя " + user_type.lower())
        entry_name = tk.Entry(self, textvariable=self.username)
        entry_pass = tk.Entry(self, textvariable=self.password, show="*")
        btn = tk.Button(self, text="Submit", command=self.destroy)

        label.grid(row=0, columnspan=2)
        tk.Label(self, text="Логин:").grid(row=1, column=0)
        tk.Label(self, text="Пароль:").grid(row=2, column=0)
        entry_name.grid(row=1, column=1)
        entry_pass.grid(row=2, column=1)
        btn.grid(row=3, columnspan=2)

    def open(self):
        self.grab_set()
        self.wait_window()
        username = self.username.get()
        password = self.password.get()
        return User(username, password, self.user_type)

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        user_types = ("Админ", "Менеджер", "Клиент")
        self.user_type = tk.StringVar()
        self.user_type.set(user_types[0])

        label = tk.Label(self, text="Пожалуйста, выберите роль пользователя")
        radios = [tk.Radiobutton(self, text=t, value=t,
                                 variable=self.user_type) for t in user_types]
        btn = tk.Button(self, text="Создать", command=self.open_window)

        label.pack(padx=10, pady=10)
        for radio in radios:
            radio.pack(padx=10, anchor=tk.W)
        btn.pack(pady=10)

    def open_window(self):
        window = UserForm(self, self.user_type.get())
        user = window.open()
        print(user)

if __name__ == "__main__":
    app = App()
    app.mainloop()

import tkinter as tk
from collections import namedtuple

User = namedtuple("User", ["username", "password", "user_type"])

class UserForm(tk.Toplevel):
    def __init__(self, parent, user_type):
        super().__init__(parent)
        self.username = tk.StringVar()
        self.password = tk.StringVar()
        self.user_type = user_type

        label = tk.Label(self, text="Создать пользователя " + user_type.lower())
        entry_name = tk.Entry(self, textvariable=self.username)
        entry_pass = tk.Entry(self, textvariable=self.password, show="*")
        btn = tk.Button(self, text="Submit", command=self.destroy)

        label.grid(row=0, columnspan=2)
        tk.Label(self, text="Логин:").grid(row=1, column=0)
        tk.Label(self, text="Пароль:").grid(row=2, column=0)
        entry_name.grid(row=1, column=1)
        entry_pass.grid(row=2, column=1)
        btn.grid(row=3, columnspan=2)

    def open(self):
        self.grab_set()
        self.wait_window()
        username = self.username.get()
        password = self.password.get()
        return User(username, password, self.user_type)

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        user_types = ("Админ", "Менеджер", "Клиент")
        self.user_type = tk.StringVar()
        self.user_type.set(user_types[0])

        label = tk.Label(self, text="Пожалуйста, выберите роль пользователя")
        radios = [tk.Radiobutton(self, text=t, value=t,
                                 variable=self.user_type) for t in user_types]
        btn = tk.Button(self, text="Создать", command=self.open_window)

        label.pack(padx=10, pady=10)
        for radio in radios:
            radio.pack(padx=10, anchor=tk.W)
        btn.pack(pady=10)

    def open_window(self):
        window = UserForm(self, self.user_type.get())
        user = window.open()
        print(user)

if __name__ == "__main__":
    app = App()
    app.mainloop()

import tkinter as tk
import tkinter.messagebox as mb

class Window(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.protocol("WM_DELETE_WINDOW", self.confirm_delete)
        self.label = tk.Label(self, text="Это всплывающее окно")
        self.button = tk.Button(self, text="Закрыть", command=self.destroy)
        self.label.pack(padx=20, pady=20)
        self.button.pack(pady=5, ipadx=2, ipady=2)

    def confirm_delete(self):
        message = "Вы уверены, что хотите закрыть это окно?"
        if mb.askyesno(message=message, parent=self):
            self.destroy()

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.btn = tk.Button(self, text="Открыть новое окно",
                             command=self.open_about)
        self.btn.pack(padx=50, pady=20)

    def open_about(self):
        window = Window(self)
        window.grab_set()

if __name__ == "__main__":
    app = App()
    app.mainloop()


import tkinter as tk

class About(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.label = tk.Label(self, text="Это всплывающее окно")
        self.button = tk.Button(self, text="Закрыть", command=self.destroy)

        self.label.pack(padx=20, pady=20)
        self.button.pack(pady=5, ipadx=2, ipady=2)

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.btn = tk.Button(self, text="Открыть новое окно",
                             command=self.open_window)
        self.btn.pack(padx=50, pady=20)

    def open_window(self):
        about = About(self)
        about.grab_set()

if __name__ == "__main__":
    app = App()
    app.mainloop()


from tkinter import *
 
 
def about():
    a = Toplevel()
    a.geometry('200x150')
    a['bg'] = 'grey'
    a.overrideredirect(True)
    Label(a, text="About this")\
        .pack(expand=1)
    a.after(5000, lambda: a.destroy())
 
 
root = Tk()
root.title("Главное окно")
Button(text="Button", width=20).pack()
Label(text="Label", width=20, height=3)\
    .pack()
Button(text="About", width=20, command=about)\
    .pack()
 
root.mainloop()


from tkinter import *
root = Tk()
 
Button(text="Button", width=30,height=10,bg='#555').pack()
Label(text='h' , width=50, height=10, bg='#159').pack()
Button(text="Button", width=20,bg='#951').pack()
 
root.update_idletasks()
s = root.geometry()
s = s.split('+')
s = s[0].split('x')
width_root = int(s[0])
height_root = int(s[1])

#в центре окна center
w = root.winfo_screenwidth()
h = root.winfo_screenheight()
w = w // 2
h = h // 2 
w = w - width_root // 2
h = h - height_root // 2
root.geometry('+{}+{}'.format(w, h))


from tkinter import *

root = Tk()
root.title('Create')
root.geometry('300x300+10+10')
root.resizable(0,0)
root['bg'] = '#159'

def close():
   exit()

def create_window():
    window = Toplevel(root)
    # Добавление элементов в window
    window['bg'] = '#951'
    window.geometry('200x200+20+20')
    window.resizable(0,0)
    window.title('Create two')
    btn1 = Button(window, text='Close', bg='#248', font='Arial 20 bold',pady=2,padx=2,command=close)
    btn1.grid(row=0,column=0)




btn = Button(root, text=" Create new window ", command=create_window)
btn.grid(row=0,column=0,sticky=N)



root.mainloop()

import tkinter as tk

def create_window():
    window = tk.Toplevel(root)
    # Добавление элементов в window
    ...

root = tk.Tk()
b = tk.Button(root, text="Create new window", command=create_window)
b.pack()

root.mainloop()


import math
rd = math.radians(180)
pi = math.pi
print(rd,pi)

import math
pi = math.pi
print(pi)

import time

print("Значение time.altzone : ", time.altzone)
#Значение time.altzone :  -25200

t = time.localtime()
print("time.asctime(t):%s " % time.asctime(t))
#time.asctime(t): Thu Oct  6 20:25:04 2022


from tkinter import *
import time

root = Tk()
root['bg'] = '#555'
root.geometry('600x600+10+10')
root.resizable(0,0)



def tick():
    # get the current local time from the PC
    time2 = time.strftime('%H:%M:%S')

    # if time string has changed, update it
    clock.config(text=time2)

    ##calls itself every 200 milliseconds to update the time
    # display as needed could use >200 ms
    clock.after(1000, tick)



def f(event):
    L1.config(text='Событие мышы\nнажата левая кл')


def f1(event):
    L2.config(text='Событие мышы\nнажата средняя кл')


def f2(event):
    L3.config(text='Событие мышы\nнажата правая кл')


def f3(event):
    L4.config(text='Событие мышы\nработает колесико')


def f4(event):
    L5.config(text='Событие клв\nнажата буква "S"')


def f5(event):
    L8.config(text='Событие клв\nнажата клавиша\n'+str(event))
    L6.config(text="Нажата клавиша \n"+event.char, font='Arial 9 bold')
    


def f6(event):
    L7.config(text='Событие клв\nнажат пробел')



 
L1 = Label(root, text='', width=20, height=10, bg='#783')
L1.place(x=0, y=0)
L2 = Label(root, text="", width=20, height=10, bg='#783')
L2.place(x=150, y=0)
L3 = Label(root, text="", width=20, height=10, bg='#783')
L3.place(x=300, y=0)
L4 = Label(root, text="", width=20, height=10, bg='#783')
L4.place(x=0, y=160)
L5 = Label(root, text="", width=20, height=10, bg='#783')
L5.place(x=150, y=160)
L6 = Label(root, text="", width=20, height=10, bg='#783')
L6.place(x=300, y=160)
L7 = Label(root, text="", width=20, height=10, bg='#783')
L7.place(x=0, y=320)
L8 = Label(root, text="", width=84, height=5, bg='#783')
L8.place(x=0, y=480)

clock = Label(root, font=('times', 20, 'bold'), bg='green')
clock.pack(fill=BOTH)

root.bind('<Button-1>', f)
root.bind('<Button-2>',f1)
root.bind('<Button-3>',f2)
root.bind('<MouseWheel>',f3)
root.bind('<s>',f4)
root.bind('<Key>',f5)
root.bind('<space>',f6)

tick()
root.mainloop()


from tkinter import *
window = Tk()
button = Button(text="Нажмите")

def fun(event):
    print(event)
window.bind("<Key>", fun)

#def fun(event):
   # print("Нажата клавиша "+event.char)
#window.bind("<Key>", fun)


#def fun(event):
    #print("кнопка нажата")
#button.bind("<MouseWheel>", fun)
#window.bind("<Double-Button-1>", fun)
#window.bind("<Motion>", fun)
#window.bind("<Return>", fun)
#window.bind("<space>", fun)
#window.bind("<s>", fun)

button.pack()
window.mainloop()
 


from tkinter import *
window = Tk()
button = Button(text="Нажмите")
def fun(event):
    print("кнопка нажата")
button.bind("<Button-1>", fun)
button.pack()
window.mainloop()

import pygame
import sys
 
FPS = 60
W = 700  # ширина экрана
H = 300  # высота экрана
WHITE = (255, 255, 255)
BLUE = (0, 70, 225)
 
sc = pygame.display.set_mode((W, H))
clock = pygame.time.Clock()
 
# координаты и радиус круга
x = W // 2
y = H // 2
r = 50
 
while 1:
    for i in pygame.event.get():
        if i.type == pygame.QUIT:
            sys.exit()
        elif i.type == pygame.KEYDOWN:
            if i.key == pygame.K_LEFT:
                x -= 3
            elif i.key == pygame.K_RIGHT:
                x += 3
 
    sc.fill(WHITE)
    pygame.draw.circle(sc, BLUE, (x, y), r)
    pygame.display.update()
    clock.tick(FPS)





def mousePressEvent(self, event):
        if event.button() == Qt.Qt.LeftButton:
            self.left_click.emit()
            print('left click')
        elif event.button() == Qt.Qt.RightButton:
            self.right_click.emit()
            print('right click')


from tkinter import Canvas
import tkinter

_width = 50
_height = 50
_size = 8

root = tkinter.Tk()
root.title("draw me a lovely matrix")
canv = Canvas(root, width=_width * _size, height=_height * _size)


class Wrapper:
    btn1d = False


def set_btn1d(value):
    print(value)
    Wrapper.btn1d = value


def toggle_color(rect):
    print('called')
    if Wrapper.btn1d:
        color = canv.itemcget(rect, 'fill')
        canv.itemconfig(rect, fill=("#aaa" if color == '#fff' else '#fff'))


rects = []
canv.bind('<ButtonPress-1>', lambda e, value=True: set_btn1d(value))
canv.bind('<ButtonRelease-1>', lambda e, value=False: set_btn1d(value))
for i in range(_size):
    for j in range(_size):
        rect = canv.create_rectangle(_width * j, _height * i, _width * (j + 1), _height * (i + 1), fill="#fff", width=0)
        rects.append(rect)
        canv.tag_bind(rect, '<Enter>', lambda e, rect=rect: toggle_color(rect))

canv.pack()
root.mainloop()


from tkinter import *
root = Tk()
root['bg'] = '#fafafa'#цвет окна
root.title('Первая программа')#название окна
root.resizable(0,0)#разворачивать окно
root.geometry('300x300+10+20') #размер окна
root.wm_attributes('-alpha',0.9)#прозрачность
canvas = Canvas(root, height=300, width=300, bg='red')
canvas.pack()
frame = Frame(root, bg='yellow')
frame.place(relx=0.15,rely=0.15,relheight=0.7,relwidth=0.7)
title = Label(frame, text='text', bg='green',font='Arial, 10')
title.pack()
btn = Button(frame, text='Button',bg='white')
btn.pack()
btn1 = Button(frame, text='Button1',bg='blue')
btn1.pack()
root.mainloop()

bnt3 = Button(root,text=' 11').grid(row=1,column=1,sticky=N)
bnt3 = Button(root,text=' Button1').grid(rowspan=1,column=1)
bnt3 = Button(root,text=' Button1').grid(row=1,column=1)

bnt3 = Button(root,text='Button3').pack(side = LEFT,fill=Y)
bnt = Button(root,text='Button2').pack(expand=True,ipadx=10,ipady=10)
bnt = Button(root,text='Button2').pack(fill=X,padx=[20,60],pady=30)
bnt = Button(root,text='Button2').pack(anchor='nw',padx=20,pady=0)
bnt1 = Button(root,text='Button1').pack(anchor='nw',padx=30,pady=0)
bnt = Button(root,text='Button2').pack(anchor='nw',padx=40,pady=0)
bnt1 = Button(root,text='Button1').pack(anchor='nw',padx=50,pady=0)

bnt = Button(root,text='Button2').pack(fill=BOTH,expand=True)
bnt1 = Button(root,text='Button1').pack(fill=BOTH,expand=True)
bnt1 = Button(root,text='Button1').pack(expand=True,ipadx=10,ipady=10)
bnt1 = Button(root,text='Button1').pack(side = LEFT,ipadx=5,ipady=5)
bnt2 = Button(root,text='Button2').pack(side = TOP,ipadx=10,ipady=10)
bnt3 = Button(root,text='Button3').pack(side = BOTTOM,ipadx=10,ipady=10)
bnt4 = Button(root,text='Button4').pack(side = RIGHT,ipadx=5,ipady=5)
bnt5 = Button(root,text='Button5').pack(expand=True,ipadx=10,ipady=10)центр



import webbrowser
import sys
from tkinter import *

def Start():
    print('Начало')
    webbrowser.open('https://www.youtube.com/',new=0)


def Browser():
    root =Tk()
    root.title('Assistant')
    root.geometry('550x500')
    Toplevel(root)

    button = Button(
    root,
    background='#555',
    foreground='#ccc',
    padx='20',
    pady='8',
    font='16',
    command=Start)
    button.pack()

    root.mainloop()

root = Tk() 
root.title('Assistant')
root.geometry('500x500')

btn = Button(text='youtube',
                background='#555',
                foreground='#ccc',
                padx='20',
                pady='8',
                font='16',
                command= Browser).pack()
root.mainloop()




import webbrowser
import sys
from tkinter import *

def Browser():
    print('Начало')
    webbrowser.open('https://www.goodle.com/',new=0)

def Browser1():
    print('Начало')
    webbrowser.open('https://www.YouTube.com/',new=0)

root = Tk() 
root.title('Assistant')
root.geometry('300x100')
root.resizable(0,0)

btn = Button(text='goodle',background='red',foreground='white', command= Browser).pack(anchor='nw',padx=10,pady=10)
btn1 = Button(text='YouTube',background='red',foreground='white', command= Browser1).pack(anchor='nw',padx=10,pady=0)

root.mainloop()




import webbrowser
import sys
from tkinter import *

def Browser():
    print('Начало')
    webbrowser.open('https://www.goodle.com/',new=0)

def Browser1():
    print('Начало')
    webbrowser.open('https://www.YouTube.com/',new=0)

def outText():
   print('text')
   

root = Tk() 
root.title('Assistant')
root.geometry('500x500')
#root.resizable(0,0)

btn = Button(text='goodle',background='red',foreground='white', command= Browser).pack(anchor='nw',padx=10,pady=10)
btn1 = Button(text='YouTube',background='red',foreground='white', command= Browser1).pack(anchor='nw',padx=10,pady=0)
btn2 = Button(text='outText',background='red',foreground='white', command= outText).pack(anchor='nw',padx=10,pady=10)

lab = Label(root).place(x=100,y=100)



root.mainloop()




from tkinter import *
from tkinter import messagebox
import random

def no():
    messagebox.showinfo('','Спасибо! Ваш голос учтен!')
    quit()


def motionMouse(event):
    btnYes.place(x=random.randint(0, 500), y=random.randint(180, 500))  
   
root = Tk()
root.geometry('600x600-10-10')
root.title('Опрос')
root.resizable(0,0)
root['bg'] = '#555'



lab = Label(root,text='Вы хотите увелтчить ЗП?', font='Arial 20 bold', bg='#fafafa').place(x=120,y=10)
btnYes = Button(root,text='Да',font='Arial 20 bold')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>', motionMouse)
btnNo =Button(root,text='Нет',font='Arial 20 bold',bg='#ffb700', command=no).place(x=350,y=100)

root.mainloop()


from tkinter import *
from tkinter import messagebox
import random

def NNo():
    messagebox.showinfo('.','привет ты еще тут???')
    quit()


def motionMouse(event):
    btnYes.place(x=random.randint(170, 400),y=random.randint(170, 500))

root =Tk()
root.geometry('600x600+10+10')
root.title('Опрос')
root.resizable(0,0)
root['bg'] = '#555'

lab=Label(root,text='Тест на выносливость',font='Arial 20 bold', bg='#ffb700').place(x=120,y=10)
btnYes = Button(root,text='Yes',font='Arial 20 bold',bg='#555')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>', motionMouse)
btnNo = Button(root,text='No', font='Arial 20 bold',bg='red',command=NNo).place(x=350,y=100)
root.mainloop()

2**10 корень
name = input('как тебя зовут?')
print(f'привет,{name}!')

name = input('как тебя зовут?')
print(f'Привет, {name}!')
lname = input('как твоя фамилия?')
print(f'Ясно, {name} {lname}!')

bool y=x>5
x=x//2
x=x%2
x%=2
x//=2
x+=2


x = 10
while True:
    x-=1    декримент + инкриментация


x = 10
while True:
    x-=1
    if x<=0:
        break
    print(x)
print('all')


PEP8


x = 9
while x>=0:
    
    
    print(x)
    x-=1
print('all')

for x in 5,7,3:
    print(x**2)


for x in range(1,10,3):
    print(x**2)


and or not



import turtle

def david():
    for step in range(6):
        turtle.begin_fill()
        for i in range(3):
            turtle.forward(30)
            turtle.left(360/3)
        turtle.end_fill()

        turtle.forward(100)
        turtle.right(60)



turtle.shape("turtle")
turtle.shapesize(2)
turtle.color('#258','green')
turtle.speed(10)

david()
turtle.backward(200)
david()


turtle.hideturtle()	



import tkinter as tk
import time

def questionQuery_After():
    btn.configure(text='Done')

def questionQuery(event):
    root.update_idletasks()
    root.after(2000, questionQuery_After)

root = tk.Tk()
btn = tk.Button(root, activebackground='red', text="Press me")
btn.pack()
btn.bind('<Button>', questionQuery)

root.mainloop()

def func():
    if button["state"] == tk.NORMAL:
        button.config(state=tk.DISABLED, bg="red")
    else:
        button.config(state=tk.NORMAL, bg="green")

https://www.tutorialkart.com/python/tkinter/button/


import tkinter as tk
import time

def questionQuery_After():
    btn.configure(text='Done')

def questionQuery(event):
    root.update_idletasks()
    root.after(2000, questionQuery_After)

root = tk.Tk()
btn = tk.Button(root, activebackground='red', text="Press me",
 bg='yellow', background='cyan' )
btn.pack()
btn.bind('<Button>', questionQuery)

root.mainloop()


from tkinter import *

root = Tk()
frame_top = Frame(root) # root можно не указывать
frame_top.pack()
label_1 = Label(frame_top, width=7, height=4, bg='yellow', text="1")
label_1.pack(side=LEFT)
label_2 = Label(frame_top, width=7, height=4, bg='orange', text="2")
label_2.pack(side=LEFT)

frame_bottom = Frame(root)
frame_bottom.pack()
label_3 = Label(frame_bottom, width=7, height=4, bg='lightgreen', text="3")
label_3.pack(side=LEFT)
label_4 = Label(frame_bottom, width=7, height=4, bg='lightblue', text="4")
label_4.pack(side=LEFT)

root.mainloop()

from tkinter import *

root = Tk()

frame_top = LabelFrame(text="Верх")
frame_top.pack()
label_1 = Label(frame_top, width=7, height=4, bg='yellow', text="1")
label_1.pack(side=LEFT)
label_2 = Label(frame_top, width=7, height=4, bg='orange', text="2")
label_2.pack(side=LEFT)

frame_bottom = LabelFrame(text="Низ")
frame_bottom.pack()
label_3 = Label(frame_bottom, width=7, height=4, bg='lightgreen', text="3")
label_3.pack(side=LEFT)
label_4 = Label(frame_bottom, width=7, height=4, bg='lightblue', text="4")
label_4.pack(side=LEFT)

root.mainloop()


frame_top.pack(side=LEFT)
frame_bottom.pack(side=LEFT)

frame_top.pack(padx=100, pady=50)
frame_bottom.pack(ipadx=10, ipady=10)

frame_bottom.pack()
label_3.pack(side=LEFT, padx=10, pady=10)
label_4.pack(side=LEFT, padx=10, pady=10)

from tkinter import *
import time

def tick():
    # get the current local time from the PC
    time2 = time.strftime('%H:%M:%S')

    # if time string has changed, update it
    clock.config(text=time2)

    # calls itself every 200 milliseconds to update the time
    # display as needed could use >200 ms
    clock.after(200, tick)

root = Tk()
clock = Label(root, font=('times', 20, 'bold'), bg='green')
clock.pack(fill=BOTH, expand=1)

tick()
root.mainloop()



Всего же виджет Label может принимать следующие параметры:

anchor: управляет положением текста (или изображения) внутри метки. Допустимые значения: N, NE, E, SE, S, SW, W, NW или CENTER. По умолчанию это CENTER. (Заглавные сокращения букв, берутся от именования направлений North - север, South - юг, East - восток, West - запад)
background/bg: устанавливает цвет фона виджета, по умолчанию зависит от платформы.
bitmap: растровое изображение, отображаемое на виджете. Если указан параметр изображения, этот параметр игнорируется в автоматическом режиме.
borderwidth/bd: ширина границы метки. Значение по умолчанию зависит от системы, но обычно составляет от 1 до 2 пикселей.
compound: контролирует, как текст и изображения в пределах метки объединяются. По умолчанию, если задано изображение или растровое изображение, оно будет отображено вместо текста. Когда для этой опции установлено значение CENTER, на изображении отображается текст. Допустимые значения: BOTTOM, LEFT, RIGHT или TOP.
cursor: курсор, отображаемый, когда мышь перемещается над меткой. По умолчанию используется стандартный курсор.
disabledforeground: цвет переднего плана для использования, когда метка отключена или недействительна. Значение по умолчанию зависит от системы.
font: шрифт, используемый для надписей. Метки могут содержать только один текст шрифта. Значение по умолчанию зависит от системы.
foreground/fg: цвет метки, используемой для цвета текста и растровой метки. По умолчанию используется цвет заданный системой.
height: высота метки. Если текст отображается на метке, размер указывается в текстовых единицах. Если изображение отображается в метке, размер указывается в пикселях (или единицах экрана). Если вы установите размер 0 или пропустите его, он рассчитывается на основе содержимого метки.
image: изображение для отображения на виджете. Значением должно быть PhotoImage, BitmapImage или совместимый объект. Если указано, это переопределяет параметры текста и растрового изображения.
padx: горизонтальные отступы для добавления текста. По умолчанию используется 1 пиксель.
pady: вертикальный отступ, чтобы добавить вокруг текста. По умолчанию используется 1 пиксель


Однако если в коде создается одно окно, то кнопка и любой другой элемент уже по умолчанию размещаются в этом окне. Поэтому первый параметр можно опустить, как в примерах выше. Если бы у нас в коде создавалось бы несколько окон, тогда мы могли бы передать в Button(root) ссылку на нужное окно.

Второй параметр options представляет набор параметров, которые мы можем установить по их имени:

activebackground: цвет элемента, когда он находится в нажатом состоянии;
activefontground: цвет текста элемента, когда он в нажатом состоянии;
bd: толщина границы (по умолчанию 2);
bg/background: фоновый цвет;
fg/fontground: цвет текста;
font: шрифт текста, например, font= «Arial 14» - шрифт Arial высотой 14px, или font=(«Verdana», 13, «bold») - шрифт Verdana высотой 13px с выделением жирным;
height: высота элемента;
highlightcolor: цвет элемента, когда она в фокусе;
image: изображение на элементе;
justify: устанавливает выравнивание текста. Значение LEFT выравнивает текст по левому краю, CENTER - по центру, RIGHT - по правому краю;
padx: отступ от границ элемента до ее текста справа и слева;
pady: отступ от границ элемента до ее текста сверху и снизу;
relief: определяет тип границы, может принимать значения SUNKEN, RAISED, GROOVE, RIDGE;
state: устанавливает состояние элемента, может принимать значения DISABLED, ACTIVE, NORMAL (по умолчанию);
text: устанавливает текст элемента;
textvariable: устанавливает привязку к элементу StringVar;
underline: указывает на номер символа в тексте элемента, который подчеркивается. По умолчанию значение -1, то есть никакой символ не подчеркивается;
width: ширина элемента;
wraplength: при положительном значении строки текста будут переносится для вмещения в пространство элемента


from tkinter import messagebox

response = messagebox.askquestion('Message title', 'Message ask content')
response = messagebox.askyesno('Message title', 'Message y/n content')
response = messagebox.askyesnocancel('Message title', 'Message y/n/cancel content')
response = messagebox.askokcancel('Message title', 'Message ok/cancel content')
response = messagebox.askretrycancel('Message title', 'Message retry/cancel content')

from tkinter import *
from tkinter import filedialog

root = Tk()
document_open = filedialog.askopenfilename()
document_save = filedialog.asksaveasfilename()

root.mainloop(


print(4 + 7)  # 11 - math expression
print(2 * 3)  # 6 - math expression
print(9 - 1)  # 8 - math expression
icecream_count = 5
icecream_price = 60
print(icecream_count * icecream_price)  # 300 - math expression
minute_total = 257
hour_total = minute_total // 60  # 4 - math expression
minute_left = minute_total % 60  # 17 - math expression
print(f'{minute_total} minutes equals {hour_total} hours and {minute_left} minutes')

print(4 > 7)  # False - boolean expression
print(2 != 3)  # True - boolean expression
print(9 <= 1)  # False - boolean expression
icecream_price_old = 55
icecream_price_new = 60
print(icecream_price_new >= icecream_price_old)  # True - boolean expression
minute_total = 257
hour_total = 4
time_comparison = hour_total * 60 > minute_total  # False - boolean expression
print(time_comparison)



Название	Оператор	Синтаксис	Вывод
равно	==	a == b	Если значения a и b равны, то условие становится истинным: True.
не равно	!=	a != b	Если значения a и b не равны, то условие становится истинным: True.
больше	>	a > b	Если значение a больше, чем значение b, то условие становится истинным: True.
меньше	<	a < b	Если значение a меньше значения b, тогда условие становится истинным: True.
больше или равно	>=	a >= b	Если значение a больше или равно значения b, то условие становится истинным: True.
меньше или равно	<=	a <= b	Если значение b меньше или равно значения b, то условие становится истинным: True.

for i in range(1106):
    if chr(i).isprintable():
        print(chr(i), end='')

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®
 ...
 АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяѐё
 

for i in range(206):
    if chr(i).isprintable():
        print(f'{i} {chr(i)}\t\t{i+150} {chr(i+150)}\t\t{i+300} {chr(i+300)}'
              f'\t\t{i+450} {chr(i+450)}\t\t{i+600} {chr(i+600)}'
              f'\t\t{i+750} {chr(i+750)}\t\t{i+900} {chr(i+900)}')


Entry(master, options)
где master - ссылка на родительское окно, а options - набор следующих параметров:

bg: фоновый цвет
bd: толщина границы
cursor: курсор указателя мыши при наведении на текстовое поле
fg: цвет текста
font: шрифт текста
justify: устанавливает выравнивание текста. Значение LEFT выравнивает текст по левому краю, CENTER - по центру, RIGHT - по правому краю
relief: определяет тип границы, по умолчанию значение FLAT
selectbackground: фоновый цвет выделенного куска текста
selectforeground: цвет выделенного текста
show: задает маску для вводимых символов
state: состояние элемента, может принимать значения NORMAL (по умолчанию) и DISABLED
textvariable: устанавливает привязку к элементу StringVar
width: ширина элемента


from tkinter import *

root = Tk()
root.title("Welcome to entry app")
text = Entry(root, width=50)
text.pack()
root.mainloop()


from tkinter import *

root = Tk()
root.title("Welcome to the second entry app")
label_login = Label(root, text="Login")
label_login.pack()
text1 = Entry(root, width=50)
text1.pack()
label_pass = Label(root, text="Password")
label_pass.pack()
text2 = Entry(root, width=50)
text2.pack()
button = Button(root, text="Enter")
button.pack()
root.mainloop()

from tkinter import *

def check_pass():
    
    if entry_login.get() and entry_pass.get():
        label_welcome.config(text="Welcome!!!")
    else:
        label_welcome.configure(text="Please enter the login\nand the password.")

root = Tk()
root.title("Welcome to the second entry app")
label_login = Label(root, text="Login")
label_login.pack()
entry_login = Entry(root, width=10)
entry_login.pack()
label_pass = Label(root, text="Password")
label_pass.pack()
entry_pass = Entry(root, width=10, show='*')
entry_pass.pack()

button = Button(root, text="Enter", command=check_pass).pack()

label_welcome = Label(root)
label_welcome.pack()
root.mainloop()


from tkinter import *

root = Tk()
root.title("Welcome to entry app")

message = StringVar()
message.set("Any")
text = Entry(root, width=10, textvariable=message)
text.pack()

root.mainloop()

from tkinter import *
from tkinter import messagebox

def show_message():
    messagebox.showinfo("GUI Python", message.get())

root = Tk()
root.title("GUI на Python")
root.geometry("300x250")

message = StringVar()
message_entry = Entry(textvariable=message)
message_entry.pack()

message_button = Button(text="Click Me", command=show_message)
message_button.pack()

root.mainloop()


from tkinter import *
from tkinter import messagebox

def display_full_name():
    messagebox.showinfo("GUI Python", name.get() + " " + surname.get())

root = Tk()
root.title("GUI на Python")

name_label = Label(text="Введите имя:")
name_label.grid(row=0, column=0, sticky="w")
name = StringVar()
name_entry = Entry(textvariable=name)
name_entry.grid(row=0, column=1)

surname_label = Label(text="Введите фамилию:")
surname_label.grid(row=1, column=0, sticky="w")
surname = StringVar()
surname_entry = Entry(textvariable=surname)
surname_entry.grid(row=1, column=1)

message_button = Button(text="Click Me", command=display_full_name)
message_button.grid(row=2, column=1)

root.mainloop()


from tkinter import *
from tkinter import messagebox

def clear():
    name_entry.delete(0, END)
    surname_entry.delete(0, END)

def display():
    messagebox.showinfo("GUI Python", name_entry.get() + " " + surname_entry.get())

root = Tk()
root.title("GUI на Python")

name_label = Label(text="Введите имя:")
name_label.grid(row=0, column=0, sticky="w")
name_entry = Entry()
name_entry.grid(row=0,column=1)
name_entry.insert(0, "Tom")

surname_label = Label(text="Введите фамилию:")
surname_label.grid(row=1, column=0, sticky="w")
surname_entry = Entry()
surname_entry.grid(row=1, column=1)
surname_entry.insert(0, "Soyer")

display_button = Button(text="Display", command=display)
display_button.grid(row=2, column=0)
clear_button = Button(text="Clear", command=clear)
clear_button.grid(row=2, column=1)

root.mainloop()


from tkinter import *

root = Tk()
button_1 = Button(root, text="One", bg="red", fg="white")
button_1.pack()
button_2 = Button(root, text="Two", bg="green", fg="black")
button_2.pack(side=TOP, fill=X)
button_3 = Button(root, text="Three", bg="blue", fg="yellow")
button_3.pack(side=LEFT, fill=Y)
button_4 = Button(root, text="Four", bg="purple", fg="lightblue")
button_4.pack(side=RIGHT)
button_5 = Button(root, text="Five", bg="blue", fg="pink")
button_5.pack(side=BOTTOM)
root.mainloop()

from tkinter import *
root = Tk()
label = Label(bg="lightgreen", width=30, height=10, text="This is a label")
label.pack()
root.mainloop()


label.pack(expand=1)


label.pack(expand=1, fill=Y)

label.pack(expand=1, anchor=SE)


from tkinter import *

root = Tk()

button_top_left = Button(text="top left", font=13)
button_top_left.place(relx=0, rely=.0)
button_top_right = Button(text="top right", font=13)
button_top_right.place(relx=.7, rely=.0)
button_bottom_left = Button(text="bottom left", font=13)
button_bottom_left.place(relx=0, rely=.7)
button_bottom_right = Button(text="bottom right", font=13)
button_bottom_right.place(relx=.6, rely=.7)

root.mainloop()


from tkinter import *

clicks = 0

def click_button():
    global clicks
    clicks += 1
    button.config(text="Clicks {}".format(clicks))

root = Tk()
root.geometry("300x100")

button = Button(text="Clicks 0", bg="#555", fg="#ccc", font=16, command=click_button)
button.place(relx=.5, rely=.5, anchor="c")

root.mainloop()
Метод place() не отслеживает расширение виджетов. Поэтому не желателен для реализации интерфейса.

Метод grid() применяет следующие параметры:

column: номер столбца, отсчет начинается с нуля
row: номер строки (ряда), отсчет начинается с нуля
columnspan: сколько столбцов должен занимать элемент
rowspan: сколько строк (рядов) должен занимать элемент
ipadx и ipady: отступы по горизонтали и вертикали соответственно от границ элемента до его текста
padx и pady: отступы по горизонтали и вертикали соответственно от границ ячейки грида до границ элемента
sticky: выравнивание элемента в ячейке, если ячейка больше элемента.
 Может принимать значения: N, E, S, W, NE, NW, SE, SW, NSEW - они указывают соответствующее направление выравнивания


from tkinter import *

root = Tk()
root.title("Welcome to grid app!")
label = Label(root, text="Hello!")
label.grid(column=1, row=0)
button_1 = Button(root, text="Left")
button_1.grid(column=0, row=0)
button_2 = Button(root, text="Right")
button_2.grid(column=2, row=0)
button_3 = Button(root, text="Bottom")
button_3.grid(column=1, row=1)
root.mainloop()


from tkinter import *

root = Tk()
root.title("Welcome to the second entry app")

label_login = Label(root, text="Login")
label_login.grid(column=0, row=0, sticky=E)
field_login = Entry(root, width=10)
field_login.grid(column=1, row=0)

label_pass = Label(root, text="Password")
label_pass.grid(column=0, row=1, sticky=E)
field_pass = Entry(root, width=10)
field_pass.grid(column=1, row=1)

button = Button(root, text="Enter")
button.grid(column=0, row=2, columnspan=2, sticky=NSEW)

root.mainloop()

text = Text(root)
text.insert(END, "Вставка текста в конец.")
text.pack()
print(text.get(1.0, END))

frame_top.pack(padx=100, pady=50)
frame_bottom.pack(ipadx=10, ipady=10)

root.geometry("400x300")
root.resizable(False, False)


entry_display = Entry(textvariable=num, justify=RIGHT)
entry_display.grid(column=0, row=0, columnspan=5, sticky=NSEW)


print(chr(177))
print(chr(8730))

from tkinter import *

clicks = 0

def click_button():
    global clicks
    clicks += 1
    button.config(text="Clicks {}".format(clicks))

root = Tk()
root.geometry("300x100")

button = Button(text="Clicks 0", bg="#555", fg="#ccc", font=16, command=click_button)
button.place(relx=.5, rely=.5, anchor="c")

root.mainloop()

from tkinter import *

clicks = 0

def click_button():
    global clicks
    clicks += 1
    button.config(text="Clicks {}".format(clicks))

root = Tk()
root.geometry("300x100")

button = Button(text="Clicks 0", bg="#555", fg="#ccc", font=16, command=click_button)
button.place(relx=.5, rely=.5, anchor="c")

root.mainloop()

a = int(input())
if a < -5:
    print('Low')
elif -5 <= a <= 5:
    print('Mid')
else:
    print('High')

from tkinter import *
root = Tk()
 
def change(event):
    b['fg'] = "red"
    b['activeforeground'] = "red"
 
b = Button(text='RED', width=10, height=3)
b.bind('<Button-1>', change)
b.bind('<Return>', change)
 
b.pack()
 
root.mainloop()

from tkinter import *
root = Tk()
 
class RedButton:
    def __init__(self):
        self.b = Button(text='RED', width=10, height=3)
        self.b.bind('<Button-1>', self.change)
        self.b.pack()
 
    def change(self, event):
        self.b['fg'] = "red"
        self.b['activeforeground'] = "red"
 
RedButton()
root.mainloop()

from tkinter import *
 
 
def b1(event):
    root.title("Левая кнопка мыши")
 
 
def b3(event):
    root.title("Правая кнопка мыши")
 
 
def move(event):
    x = event.x
    y = event.y
    s = "Движение мышью {}x{}".format(x, y)
    root.title(s)
 
 
root = Tk()
root.minsize(width=500, height=400)
 
root.bind('<Button-1>', b1)
root.bind('<Button-3>', b3)
root.bind('<Motion>', move)
 
root.mainloop()


https://mail.google.com/mail/u/0/#inbox





print('Enter cycle number')
n = int(input())
k = 0

for i in range(0,n):
    print('Enter the number to be divisible by 4 and not divisible by 7')
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print('The number of numbers is ', k, ' divided by 4 and not divided by 7')


n = int(input())
k = 0

for i in range(0,n):
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print(k)



'''
sp1 = ('text0','text1','text2','text3')
print(sp1)
print(sp1[2])

print(sp1[::2])
'''
s1 = {'k': 'zn','collor': 'black', 'дерево':'листик'}

print(s1)

print(s1['k'])
s1['машина'] = 'двигатель'

print(s1)

s1['collor'] = 'white'
print(s1)

del s1['дерево']

print(s1)



sp1 = ['0','1','2','3','4' ]
print(sp1)

print(sp1[3])
a = 'day0'
sp1[3] = 'сено'
sp1[0] = a
print(sp1[3])
sp1.append('width')
del sp1[1]

print(sp1)

sp2 = [221,257,88,663,744,999,65,45,2,0]
sp3 = [21,'text',2563,'text']

sp4 = [sp1, sp2, sp3]

print(sp4)

print(sp4[1][1])

sp5 = [1,2,3]
sp6 = [4,5,6]
sp7 = sp5+sp6
print(sp7)

sp8 = [5,9]
sp9 = sp8 * 10
print(sp9)

print(sp1[:2])
print(sp1[1:3])
print(sp1[::2])



#t=2+2
#t=30-16
#t=2*36
#t=100/2
#t=100//2
#t = 10 % 12
#print(t)
"""
arr = [1,2,3,4,5,6,7,8,9,10]
for i in arr:
    if i % 2 == 0:
        print(i)

"""
"""
print(0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+
      0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1)
"""




'''
a = 0.1 
for i in range(13):
    a += 0.1
print(a)


try:
    print(24 / 0)
except Exception as e:
    print(e)
DivisionByZero

'''
'''
from array import *
data = array('i',[2,5,4,0,8]) 
#data.insert(4,10)
#data.pop(0)
for i in data:
    print(i)
    print(len(data))
'''
'''

arr = [10,11,0,5,0,8,0,9,0,7,0,321]

for i in arr:
    a = i
    b = None
    if a == 0:
        print('!!!!!!!! делитель равен нулю !!!!!!!!')
    else:
        b = 345/a
        print(' результат = ' + str(b))
'''


d1 = [1,4,5]
for i in range(2):
    d2 = []
    for j in range(2):
        d2.append(1)
    d1.append(d2)

print(d1)
print(d2)
print(i)





from random import randint
for i in range(1,11):
    s=0
    print(' ',2**i)
    i*=i
    print(i,"/")


import time
from time import gmtime, strftime

x = 0
def foo():
    time.sleep(1)

while True:
    n = strftime('%a,%d %b %Y %H:%M:%S ', gmtime())
    x +=1
    print(x)
    print(n)
    foo()
   #break
t = time.gmtime(0)
print(t)






import time
from time import gmtime, strftime

x = 0
def foo():
    time.sleep(1n)

while True:
    n = strftime('%a,%d %b %Y %H:%M:%S ', gmtime())
    x +=1
    print(x)
    print(n)
    foo()
   #break
t = time.gmtime(0)
print(t)

time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)
1111111111111111111111111111111111111111111111

import time

def foo():
    time.sleep(2.5)


t0 = time.clock()
foo()
print(time.clock() - t0, 'Время обработки в секундах')

t0 = time.time()
foo()
print(time.time() - t0, 'Время стены с секундах')

111111111111111111111111111111111111111111111

#program for translating from Russian into English

from cgitb import text
from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


#text translation function
def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)


#creating the main window
root = Tk()
root.geometry('500x340')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = '#555'

#class
translator = Translator()

#dictionary with languages
languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

#top Frame
header_frame = Frame(root, bg='#783')

#stretch in length
header_frame.pack(fill=X)

#central arrow Frame
header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

#first left Combobox
comboOne = ttk.Combobox(header_frame,values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0, pady=0, padx=0)

#Label with an arrow at the top
label = Label(header_frame, fg='black', bg='#783', font='Arial 20 bold',text='=>')
label.grid(row=0, column=1,pady=2)

#Text from the left Text input
lab=Label(root, text='Text input\nВвод текста', font='Arial 10 bold',bg='#783')
lab.place(x=0,y=50)

#Text from the left Output text
lab1=Label(root, text='Text Output\nВывод текста', font='Arial 9 bold',bg='#783')
lab1.place(x=0,y=160)

#second right Combobox
comboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='raedonly')
#Текущий/current/the language is automatically set to combo box
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

#first text entry window
t_input = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_input.place(x=90, y=50)

#text translation button
btn = Button(root, width=40, height=2, text='__________Перевести => Translate__________', font='Arial 15 bold',bg='#783', command=translate)
btn.place(x=5,y=270)

#second window for displaying the translated text
t_output = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_output.place(x=90, y=160)

#program cycle
root.mainloop()






pip install pygame
pip install googletrans==3.1.0a0
pip install installer 
installer -F

#program for translating from Russian into English

from cgitb import text
from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


#text translation function
def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)


#creating the main window
root = Tk()
root.geometry('500x340')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = '#555'

#class
translator = Translator()

#dictionary with languages
languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

#top Frame
header_frame = Frame(root, bg='#783')

#stretch in length
header_frame.pack(fill=X)

#central arrow Frame
header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

#first left Combobox
comboOne = ttk.Combobox(header_frame,values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0, pady=0, padx=0)

#Label with an arrow at the top
label = Label(header_frame, fg='black', bg='#783', font='Arial 20 bold',text='=>')
label.grid(row=0, column=1,pady=2)

#Text from the left Text input
lab=Label(root, text='Text input\nВвод текста', font='Arial 10 bold',bg='#783')
lab.place(x=0,y=50)

#Text from the left Output text
lab1=Label(root, text='Output text\nВывод текста', font='Arial 9 bold',bg='#783')
lab1.place(x=0,y=160)

#second right Combobox
comboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='raedonly')
#Текущий/current/the language is automatically set to combo box
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

#first text entry window
t_input = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_input.place(x=90, y=50)

#text translation button
btn = Button(root, width=40, height=2, text='__________Перевести => Translate__________', font='Arial 15 bold',bg='#783', command=translate)
btn.place(x=5,y=270)

#second window for displaying the translated text
t_output = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_output.place(x=90, y=160)

#program cycle
root.mainloop()

from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)



root = Tk()
root.geometry('500x350')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = 'black'
translator = Translator()

languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

header_frame = Frame(root, bg='black')
header_frame.pack(fill=X)

header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

comboOne = ttk.Combobox(header_frame,
                        values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0)



label = Label(header_frame, fg='white', bg='black', font='Arial 20 bold',text='->')
label.grid(row=0, column=1)

comboTwo = ttk.Combobox(header_frame,
                        values=[lang for lang in languages], state='raedonly')
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

t_input = Text(root, width=35, height=5, font='Arial 12 bold')
t_input.pack(padx=20)

btn = Button(root, width=45, text='Перевести', command=translate)
btn.pack()

t_output = Text(root, width=45, height=5, font='Arial 20 bold')
t_output.pack(pady=20)

root.mainloop()


from ast import Delete
from cgitb import text
from faulthandler import disable
from pickle import GLOBAL
import time
from tkinter import *
a = 0
f = 300

root = Tk()
root.title('Прога')
root.geometry('200x200+10+10')
root.resizable(0,0)

def bot():

    global f , a

    f = f+1

    btn.config(text=f, bg='#'+str(f+0))
    
    #entry.delete('0', END)
    entry.insert(END, '')
    #backgroundcolor = ' Black'
       #btn.config(text=f, bg='#'+str(f+0),background='yellow') 
    #time.sleep(0.2)
    while True:
        a = a + 1
        #time.sleep(1)
        entry.insert(END, a)
        
        if a >= 10:
            break
#time.sleep(10)

def gh():
    btn.config(state=['active'],fg='green',bd='10')

def dis():
    btn.config(state=['disabled'],fg='red',bg='gray',bd='0')
    

    
btn1 = Button(root, text='  Active  ',command=gh)
btn1.pack()

btn2 = Button(root, text='Disabled',command=dis)
btn2.pack()

btn = Button(root, text='Button', font='Arial 10 bold', padx=10, pady=10, bg='#562',
                                    bd='10',state=['disabled'],  fg='black',  command=bot)
btn.pack()

entry = Entry(root,width=30)
entry.pack()

root.mainloop()


from tkinter import *
import pyautogui

def b1(event):
    root.title('Левая кнопка мыши')


def b3(event):
    root.title('Right кнопка мыши')

def movemouse(event):
    #pyautogui.size()
    pyautogui.position()
    x = event.x
    y = event.y
    s = "движение мышью {} x {}" .format(x,y)
    root.title(s) 

   

root = Tk()

root.configure(bg='black')

btn = Button(text='Mause',command=movemouse)
btn.pack()

root.bind('<Button-1>', b1)
root.bind('<Button-3>', b3)
root.bind('<Motion>', movemouse)

root.mainloop()


from tkinter import * 


def event_info(event):
    print(type(event))
    print(event)
    print(event.time)
    print(event.x_root)
    print(event.y_root)


root = Tk()
root.bind('a', event_info)


root.mainloop()



from cgitb import text
from tkinter import *
from turtle import right


def left_click(event):
    frame1.config(bg='red')
    frame2.config(bg='white')
    frame3.config(bg='white')

    root.config(bg='white')
    root.title('Left_click')

def mid_click(event):
    frame1.config(bg='white')
    frame2.config(bg='red')
    frame3.config(bg='white')

    root.title('Middle_click')

def right_click(event):
    frame1.config(bg='white')
    frame2.config(bg='white')
    frame3.config(bg='red')

    root.title('Right_click')


root = Tk()
root.config(bg='#459')
root.title('Click')

frame1 = Frame(root, width=500, height=500, bg='white')
frame2 = Frame(root, width=500, height=500, bg='white')
frame3 = Frame(root, width=500, height=500, bg='white') 

frame1.grid(row=0, column=0, padx = 1, pady = 1)
frame2.grid(row=0, column=1, padx = 1, pady = 1)
frame3.grid(row=0, column=2, padx = 1, pady = 1)

root.bind('<Button-1>', left_click)
root.bind('<Button-2>', mid_click)
root.bind('<Button-3>', right_click)

root.mainloop()


from cgitb import text
from tkinter import *
from turtle import right


def left_click(event):
    frame1.config(bg='red')
    frame2.config(bg='white')
    frame3.config(bg='white')

    root.title('Left_click')

  

def mid_click(event):
    frame1.config(bg='white')
    frame2.config(bg='red')
    frame3.config(bg='white')
    root.title('Middle_click')

    

def right_click(event):
    frame1.config(bg='white')
    frame2.config(bg='white')
    frame3.config(bg='red')
    root.title('Right_click')

    


root = Tk()
root.config(bg='#459')
root.title('Click')

frame1 = Frame(root, width=500, height=500, bg='white')
frame2 = Frame(root, width=500, height=500, bg='white')
frame3 = Frame(root, width=500, height=500, bg='white') 

frame1.grid(row=0, column=0, padx = 1, pady = 1)
frame2.grid(row=0, column=1, padx = 1, pady = 1)
frame3.grid(row=0, column=2, padx = 1, pady = 1)

root.bind('<Button-1>', left_click)
root.bind('<Button-2>', mid_click)
root.bind('<Button-3>', right_click)

root.mainloop()






pip install python-tk
>>> import tkinter
>>> tkinter._test()
import Tkinter as tk

from tkinter import *
root = Tk()
root.title('Прога')
root.geometry('200x200')
root.resizable(0,0)
bnt = Button(root, text='Button').pack()
root.mainloop()




1
"topmost": must be -alpha, -transparentcolor, -disabled, -fullscreen, 
-toolwindow, or -topmost

from tkinter import *
root = Tk()
root['bg'] = '#fafafa'
root.title('name')

root.wm_attributes('-alpha',0.7) прозрачность
root.geometry('300x250')
root.resizable(width=False, height=False)
canvas = Canvas(root,height=300, width=250)
canvas.pack()
frame = Frame(root, bg='red')
frame.place(relx=0.15,rely=0.15,relwidth=0.7, relheigh=0.7)
title = Label(frame,text='text',bg='gray',font = 40)
title.pack()
btn = Button(frame, text='Button', bg='yellow')
btn.pack()

root.mainloop()
Russian Language Pack for Visual Studio Code  v1.71.9140935
MS-CEINTL.vscode-language-pack-ru
2


from tkinter  import *
root = Tk()

root.mainloop()

3


from tkinter import *
root = Tk()
root['bg']='#fafafa'
root.title('name')
root.wm_attributes('-alpha', 0.1)
root.wm_attributes('-fullscreen', True)
root.wm_attributes('-topmost', True)
root.mainloop()


from cgitb import text
from tkinter import *
from tkinter.tix import ButtonBox
root = Tk()
root['bg']='green'
root.title('name')
root.wm_attributes('-alpha', 0.9)
#root.wm_attributes('-fullscreen', True)
root.wm_attributes('-topmost', True)
root.geometry('300x300')
root.resizable(0,0)
a=10
d=10
c=a+d
root.title(c)
btv=Button(root,text="Serega "+  str(c))
btv.pack()
root.mainloop()

608b8b82342688f8ebfed1c85c76515a weather kye



import logging
from tkinter import *
from tkinter import font
from tkinter import messagebox
root = Tk()

def btn_click():
   # messagebox.showinfo('проверка',' сообщение')
    login = loginInput.get()
    password = passField.get()

    info_str = f'Логин: {str(login)}, Пароль: {str(password)}'
    messagebox.showinfo('Название',info_str)

    print('Some text')

root.title('name')
root['bg']='#fafafa'
root.geometry('310x305+10+100')
root.resizable(0,0)
root.wm_attributes('-alpha', 0.9)

canvas = Canvas(root,height=295,width=290,bg='gold')
canvas.pack()

frame = Frame(root, bg='red')
frame.place(relx=0.15,rely=0.15,relheight=0.7,relwidth=0.7)

title = Label(frame, text='text',bg='gray',font='Arial,40').pack()
#title.pack()
btn = Button(frame, text='Button', bg='yellow',font='Arial,20', command=btn_click)
btn.pack()
loginInput = Entry(frame,bg='white')
loginInput.pack()
passField = Entry(frame,bg='white',show='*')
passField.pack()

root.mainloop()

from logging import root
from tkinter import *
from unittest import result
from tkinter.font import Font
from urllib import request
root = Tk()

def get_weather():
    city = cityField.get()
    key ='608b8b82342688f8ebfed1c85c76515a'
    url = 'https://home.openweathermap.org/'
    params = {'APPID': key, 'q': city, 'units': 'imperial'}
    result = request.get(url,params=params) 
    weather = result.json()

    print(weather)




root['bg'] = '#fafafa'
root.title('Погода')
root.geometry('300x300+10+10')
root.resizable(0,0)

frame_top = Frame(root, bg='red',bd=5)
frame_top.place(rely=0.15,relx=0.15,relheight=0.25,relwidth=0.7)

frame_button = Frame(root,bg='green',bd=10)
frame_button.place(relx=0.15,rely=0.55,relwidth=0.7,relheight=0.25)

cityField = Entry(frame_top,bg='white')
cityField.pack()

btn = Button(frame_top, text='Просмотреть погоду', command=get_weather)
btn.pack()

info = Label(frame_button, text='Информация о погоде', bg='#ffb700')
info.pack()
root.mainloop()


from logging import root
from tkinter import *
from unittest import result
from tkinter.font import Font
from urllib import request
root = Tk()

def get_weather():
    city = cityField.get()
    key ='608b8b82342688f8ebfed1c85c76515a'
    url = 'https://home.openweathermap.org/'
    params = {'APPID': key, 'q': city, 'units': 'imperial'}
    result = request.get(url,params=params) 
    weather = result.json()

    print(weather)




root['bg'] = '#fafafa'
root.title('Погода')
root.geometry('300x300+10+10')
root.resizable(0,0)

frame_top = Frame(root, bg='red',bd=5)
frame_top.place(rely=0.15,relx=0.15,relheight=0.25,relwidth=0.7)

frame_button = Frame(root,bg='green',bd=10)
frame_button.place(relx=0.15,rely=0.55,relwidth=0.7,relheight=0.25)

cityField = Entry(frame_top,bg='white')
cityField.pack()

btn = Button(frame_top, text='Просмотреть погоду', command=get_weather)
btn.pack()

info = Label(frame_button, text='Информация о погоде', bg='#ffb700')
info.pack()
root.mainloop()


from tkinter import *
from tkinter import messagebox
import random


def no():
    messagebox.showinfo('','Спасибо за ваш выбор')
    quit()

def motionMouse(event):
    btnYes.place(x=random.randint(0,500),y=random.randint(0,500))


root = Tk()
root.geometry('600x600')
root.resizable(0,0)
root['bg'] = '#ffb700'
root.title('прог')

lab = Label(root, text='Лови кнопку',font="Arial 20 bold",bg='#555').pack()
btnYes = Button(root, text='Yes', font='Arial 20 bold',bg='red')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>',motionMouse)
btnNo = Button(root,text='No', font='Arial 20 bold', command=no).place(x=350, y=100)

root.mainloop()




from tkinter import *
from tkinter import messagebox
import random

def vihod():
    messagebox.showinfo('Quit','Quit')
    quit()

def motionMouse(event):
    btn1.place(x=random.randint(10,500), y=random.randint(150,500))

root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)
 
btn1 = Button(root, text='Button1', font='Arial 20 bold',bg='gold')
btn1.place(x=150,y=100)
btn1.bind('<Enter>', motionMouse )
btn2 = Button(root, text='Button2', font='Arial 20 bold',bg='#555', command=vihod).place(x=300,y=100)



lab1 = Label(root, text='Label1', font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 20 bold', bg='green').place(x=250 , y=5)
root.mainloop()

padx=10, pady=10 размер кнопки



from cgitb import text
from tkinter import *
from tkinter import messagebox
import random

global count
count = 100
count1 = 0

def vihod():
    #messagebox.showinfo('Quit','Quit')
    #quit()
    global count
    count += 1
    btn2.config(text='Button '+str(count+300),bg='#'+str(count+300))
    Frame1.config(bg='#'+str(count))
    root.config(bg='#'+str(count+100))
    btn1.config(text=count, bg='#'+str(count+200))
    lab1 = Label(root, text= count+400  , font='Arial 10 bold', bg='#'+str(count+400
                                                                )).place(x=150,y=75)
    if count>=110:
        lab2 = Label(root, text=count, font='Arial 20 bold', bg='red').place(x=count,y=count+50)

def motionMouse(event):
    btn1.place(x=random.randint(60,410), y=random.randint(156,530))
    global count1
    count1 += 1
    btn1.configure(text=count1)


 


root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)

Frame1 = Frame(root, bg='gold')
Frame1.place(relx=0.10,rely=0.26,relheight=0.7,relwidth=0.8)
 
btn1 = Button(root, text='Button1', font='Arial 10 bold',bg='gold', padx=30, pady=10)
btn1.place(x=150,y=100)

btn1.bind('<Enter>', motionMouse )

btn2 = Button(root, text='Button2', font='Arial 10 bold',bg='#510', command=vihod)
btn2.place(x=300,y=100)



lab1 = Label(root, text= count  , font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 10 bold', bg='green').place(x=250 , y=5)



root.mainloop()

from cgitb import text
from tkinter import *
from tkinter import messagebox
import random

global count
count = 100
count1 = 0

def vihod():
    #messagebox.showinfo('Quit','Quit')
    #quit()
    global count
    count += 1
    btn2.config(text='Button '+str(count+300),bg='#'+str(count+300))
    Frame1.config(bg='#'+str(count))
    root.config(bg='#'+str(count+100))
    btn1.config(text=count, bg='#'+str(count+200))
    lab1 = Label(root, text= count+400  , font='Arial 10 bold', bg='#'+str(count+400
                                                                )).place(x=150,y=75)
    if count>=110:
        lab2 = Label(root, text=count, font='Arial 20 bold', bg='red').place(x=count,y=count+50)

def motionMouse(event):
    btn1.place(x=random.randint(60,410), y=random.randint(156,530))
    global count1
    count1 += 1
    btn1.configure(text=count1)


 


root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)

Frame1 = Frame(root, bg='gold')
Frame1.place(relx=0.10,rely=0.26,relheight=0.7,relwidth=0.8)
 
btn1 = Button(root, text='Button1', font='Arial 10 bold',bg='gold', padx=30, pady=10)
btn1.place(x=150,y=100)

btn1.bind('<Enter>', motionMouse )

btn2 = Button(root, text='Button2', font='Arial 10 bold',bg='#510', command=vihod)
btn2.place(x=300,y=100)



lab1 = Label(root, text= count  , font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 10 bold', bg='green').place(x=250 , y=5)



root.mainloop()


import time
from tkinter import *


time.sleep(5)


Найти объем цилиндра, если диаметр основания равен 18 см, а высота 27 см.
обьем целиндра 
V = pi * r**2 * h
r = d/2
V = pi * 9**2 * 27 = 2187pi(куб,см)
2187 * 3,14 = 6867,18(куб,см)


Площадь цилиндра через диаметр

S(площадь боковой поверхности)
S + 2 * S (основание) = pi * d * h +((pi*d**2)/2)

S(площ бок повх)= pi * d * h

h=(S(bok pov-sti)/pi *d)
https://tvlad.ru/mass/massa-poloy-detali.html









from tkinter import *
import turtle
from math import *
import math
import re
from functools import partial



def is_valid(newval):
    return re.match("^\\d{0,11}$", newval) is not None



def show(lb4,ent1,ent2):
        D  = (ent1.get()) # диаметр
        t  = (ent2.get()) # толщина
       
        math.pi = pi
        print(int(t)+int(D))
        S = pi / 4 * ((int(D)**2) - ((int(D) - 2 * int(t))**2))
          
        lb4["text"] = S , 'mm2'
        #lb4.config(text="Result = %d" % result)  
        return  



t = Tk()
t.title('Пдощадь круга')
t.geometry('500x400+10+10')

number1 = StringVar()  
number2 = StringVar() 

check = (t.register(is_valid), "%P")

can = Canvas(t, width=250, height=250)
can.place(x=200,y=100)

can.create_line(10,50,100,50)
can.create_line(35,10,50,30)
can.create_oval(10,100,100,10)
can.create_oval(30,80,80,30)

lb1 = Label(text='Площадь кольца через толшину и внешний диаметр' )
lb1.place(x=0,y=5)

lb2 = Label(text='Диаметр D')
lb2.place(x=30,y=25)

lb3 = Label(text='Толшинa T')
lb3.place(x=30,y=63)

lb4 = Label(text='Площадь: ')
lb4.place(x=200,y=63)

ent1 = Entry(validate="key", validatecommand=check,textvariable=number1)
ent1.place(x=30,y=45)

ent2 = Entry(validate="key", validatecommand=check,textvariable=number2)
ent2.place(x=30,y=85)

show = partial(show, lb4, number1, number2) 

btn = Button(text='Вычислить',command=show)
btn.place(x=50,y=115)





t.mainloop()


 


import tkinter as tk  
from functools import partial  
   
   
def show(label_result, n1, n2):  
    num1 = (n1.get())  
    num2 = (n2.get())  
    result = int(num1)+int(num2)  
    label_result.config(text="Result = %d" % result)  
    return  
   
root = tk.Tk()  
root.geometry('400x200+100+200')  
  
root.title('Calculator')  
   
number1 = tk.StringVar()  
number2 = tk.StringVar()  
  
labelNum1 = tk.Label(root, text="A").grid(row=1, column=0)  
  
labelNum2 = tk.Label(root, text="B").grid(row=2, column=0)  
  
labelResult = tk.Label(root)  
  
labelResult.grid(row=7, column=2)  
  
entryNum1 = tk.Entry(root, textvariable=number1).grid(row=1, column=2)  
  
entryNum2 = tk.Entry(root, textvariable=number2).grid(row=2, column=2)  
  
show = partial(show, labelResult, number1, number2)  
  
buttonCal = tk.Button(root, text="Calculate", command=show).grid(row=3, column=0)  
  
root.mainloop()  

from tkinter import *
import turtle
from math import *
import math
import re
from functools import partial



def is_valid(newval):
    return re.match("^\\d{0,11}$", newval) is not None



def show(lb4,ent1,ent2):
        D = (ent1.get()) # диаметр
        t = (ent2.get()) # толщина
        og = int(D) + int(t)
        math.pi = pi
        S = pi / 4 * ((D**2) - ((D - 2 * t)**2))
        #lb4.config(text=''+og)  
        lb4["text"] = og , 'mm2'
        return  



t = Tk()
t.title('Пдощадь круга')
t.geometry('500x400+10+10')

number1 = StringVar()  
number2 = StringVar() 

check = (t.register(is_valid), "%P")

can = Canvas(t, width=250, height=250)
can.place(x=200,y=100)

can.create_line(10,50,100,50)
can.create_line(35,10,50,30)
can.create_oval(10,100,100,10)
can.create_oval(30,80,80,30)

lb1 = Label(text='Площадь кольца через толшину и внешний диаметр' )
lb1.place(x=0,y=5)

lb2 = Label(text='Диаметр D')
lb2.place(x=30,y=25)

lb3 = Label(text='Толшинa T')
lb3.place(x=30,y=63)

lb4 = Label(text='Площадь: ')
lb4.place(x=200,y=63)

ent1 = Entry(validate="key", validatecommand=check,textvariable=number1)
ent1.place(x=30,y=45)

ent2 = Entry(validate="key", validatecommand=check,textvariable=number2)
ent2.place(x=30,y=85)

show = partial(show, lb4, number1, number2) 

btn = Button(text='Вычислить',command=show)
btn.place(x=50,y=115)





t.mainloop()


column — это номер столбца, отсчитывается с нуля;
row — это номер строки, отсчитывается с нуля;
columnspan — указывает число столбцов, занимаемых элементом;
rowspan — указывает число строк;
ipadx и ipady — подразумеваются отступы по горизонтали и вертикали от границ компонента до текста компонента;
padx и pady — аналогичные отступы, но от границ ячейки грида до границ компонента;
sticky — определяет выравнивание элемента в ячейке в случае, когда ячейка больше компонента.
import turtle

t = turtle.Pen()

q = 100
w = 100
e = 10
r = 0

for i in range(72):
    t.speed(11)
    t.forward(200)
    t.left(185)
    t.forward(200)
    '''
    t.goto(q,w)
    t.goto(e,r)
    q = q + 10
    w = w + 10
    e = e + 10
    r = r + 10



print(q,w,e,r)
 '''   
    
   
    
    
    #if k % 1 == 0:
        
        
   
   
    


input()





import turtle
t = turtle.Pen()
t.forward(100)
t.left(90)
t.forward(100)
t.left(90)
t.forward(100)
t.left(90)
t.forward(100)

t.up()
t.goto(250,250)
t.down()
t.color( "green")
t.pensize(3)
t.circle(100)
t.reset()
t.setx(10)
t.sety(10)




input()


print('Enter cycle number')
n = int(input())
k = 0

for i in range(0,n):
    print('Enter the number to be divisible by 4 and not divisible by 7')
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print('The number of numbers is ', k, ' divided by 4 and not divided by 7')


n = int(input())
k = 0

for i in range(0,n):
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print(k)



'''
sp1 = ('text0','text1','text2','text3')
print(sp1)
print(sp1[2])

print(sp1[::2])
'''
s1 = {'k': 'zn','collor': 'black', 'дерево':'листик'}

print(s1)

print(s1['k'])
s1['машина'] = 'двигатель'

print(s1)

s1['collor'] = 'white'
print(s1)

del s1['дерево']

print(s1)



sp1 = ['0','1','2','3','4' ]
print(sp1)

print(sp1[3])
a = 'day0'
sp1[3] = 'сено'
sp1[0] = a
print(sp1[3])
sp1.append('width')
del sp1[1]

print(sp1)

sp2 = [221,257,88,663,744,999,65,45,2,0]
sp3 = [21,'text',2563,'text']

sp4 = [sp1, sp2, sp3]

print(sp4)

print(sp4[1][1])

sp5 = [1,2,3]
sp6 = [4,5,6]
sp7 = sp5+sp6
print(sp7)

sp8 = [5,9]
sp9 = sp8 * 10
print(sp9)

print(sp1[:2])
print(sp1[1:3])
print(sp1[::2])



#t=2+2
#t=30-16
#t=2*36
#t=100/2
#t=100//2
#t = 10 % 12
#print(t)
"""
arr = [1,2,3,4,5,6,7,8,9,10]
for i in arr:
    if i % 2 == 0:
        print(i)

"""
"""
print(0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+
      0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1)
"""




'''
a = 0.1 
for i in range(13):
    a += 0.1
print(a)


try:
    print(24 / 0)
except Exception as e:
    print(e)
DivisionByZero

'''
'''
from array import *
data = array('i',[2,5,4,0,8]) 
#data.insert(4,10)
#data.pop(0)
for i in data:
    print(i)
    print(len(data))
'''
'''

arr = [10,11,0,5,0,8,0,9,0,7,0,321]

for i in arr:
    a = i
    b = None
    if a == 0:
        print('!!!!!!!! делитель равен нулю !!!!!!!!')
    else:
        b = 345/a
        print(' результат = ' + str(b))
'''


d1 = [1,4,5]
for i in range(2):
    d2 = []
    for j in range(2):
        d2.append(1)
    d1.append(d2)

print(d1)
print(d2)
print(i)





from random import randint
for i in range(1,11):
    s=0
    print(' ',2**i)
    i*=i
    print(i,"/")

num  = 1
num_day = 3
st = 'Посетителей: %s человек за %s дней'
if num == 1 and num_day ==3:
    st1 = 'Посетитель: %s человек за %s дня'
    print(st1 %(num,num_day))
elif  num >= 1 and num_day >=3:
    st = 'Посетителей: %s человек за %s дней'
    print(st %(num,num_day))


st1 ="text"
st2 ='text2'
st3 ='text " text"'
st4 =" text 'text222'"
st5 ='''text 'text' "text"'''
st6 =''' text
2 text'''

st7 = 'test\'text\''
st8 = 'text\'text'
st9 = 'text'
st10 = 'text'
st11 = st9+st10
st12 = 'text'
st13 = st12*10

#num = 200
#st14 = 'text %s text'

#print(st14 % num)
'''
num = 200
num_day = 365
st16 = 'Посетителей %s за %s дней'
print(st16 % (num, num_day))

'''
st20 = 'text '
print(st20[2])
print(st20[:1:])


a = 2+2
b = 2*2
c = 20-10
v = 100/20.368
n = 100//5.31
d = 20+5*2-20+66/2
df = 20+(5*2)-(20+66/2)
z = 50
z = 10
z = 20+365*10-365*2
f_c = 20
cop = 15
ykr = 2
day = 365

qw = f_c+cop*day-day*ykr

name = 'vasy'

print(name)
'''

arr = [25,36,95,14,75,65,28,44]


print(arr[5])

print(arr[6])

'''

# [start: stop: step]
'''
arr = [25,36,95,14,75,65,28,44]

arr_b = arr[:]

print(arr_b)

'''
'''
arr = [25,36,95,14,75,65,28,44]

arr_b = arr[::2]

print(arr_b)

'''
'''
arr = [25,36,95,14,75,65,28,44]

arr_b = arr[3:6]

print(arr_b)
'''

arr = [25,36,95,14,75,65,28,44]

print(arr[3:6])
print(arr[3:])
print(arr[:3])
print(arr[::2])




import time

a = 0

while True:
    #a += 1
    a = a + 1
    print(a)
    print('ждем 5 сек')
    time.sleep(5)
    if a>10:
        break
print('exit')
time.sleep(2)


"""
for i in range(5):
    print(i)
"""
"""
ar = ['fgf', 'hjhkjkj','gfgfgf','fgf', 'hjhkjkj','gfgfgf'] 

for i in range(6):
    print(ar[i])
"""
"""
ar = ['2', 'hjhkjkj','gfgfgf','fgf', 'hjhkjkj','gfgfgf', 'hjhkjkj','gfgfgf','fgf', 'hjhkjkj','5'] 

for i in range(len(ar)):
    print(ar[i])

"""
'''
for i in range(1,31):
    print(i)
'''
'''
for i in range(-13,-10):
    print(i)
'''
for i in range(10,110,10):
    print(i)



import tkinter as tk
from collections import namedtuple

User = namedtuple("User", ["username", "password", "user_type"])

class UserForm(tk.Toplevel):
    def __init__(self, parent, user_type):
        super().__init__(parent)
        self.username = tk.StringVar()
        self.password = tk.StringVar()
        self.user_type = user_type

        label = tk.Label(self, text="Создать пользователя " + user_type.lower())
        entry_name = tk.Entry(self, textvariable=self.username)
        entry_pass = tk.Entry(self, textvariable=self.password, show="*")
        btn = tk.Button(self, text="Submit", command=self.destroy)

        label.grid(row=0, columnspan=2)
        tk.Label(self, text="Логин:").grid(row=1, column=0)
        tk.Label(self, text="Пароль:").grid(row=2, column=0)
        entry_name.grid(row=1, column=1)
        entry_pass.grid(row=2, column=1)
        btn.grid(row=3, columnspan=2)

    def open(self):
        self.grab_set()
        self.wait_window()
        username = self.username.get()
        password = self.password.get()
        return User(username, password, self.user_type)

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        user_types = ("Админ", "Менеджер", "Клиент")
        self.user_type = tk.StringVar()
        self.user_type.set(user_types[0])

        label = tk.Label(self, text="Пожалуйста, выберите роль пользователя")
        radios = [tk.Radiobutton(self, text=t, value=t,
                                 variable=self.user_type) for t in user_types]
        btn = tk.Button(self, text="Создать", command=self.open_window)

        label.pack(padx=10, pady=10)
        for radio in radios:
            radio.pack(padx=10, anchor=tk.W)
        btn.pack(pady=10)

    def open_window(self):
        window = UserForm(self, self.user_type.get())
        user = window.open()
        print(user)

if __name__ == "__main__":
    app = App()
    app.mainloop()

import tkinter as tk
from collections import namedtuple

User = namedtuple("User", ["username", "password", "user_type"])

class UserForm(tk.Toplevel):
    def __init__(self, parent, user_type):
        super().__init__(parent)
        self.username = tk.StringVar()
        self.password = tk.StringVar()
        self.user_type = user_type

        label = tk.Label(self, text="Создать пользователя " + user_type.lower())
        entry_name = tk.Entry(self, textvariable=self.username)
        entry_pass = tk.Entry(self, textvariable=self.password, show="*")
        btn = tk.Button(self, text="Submit", command=self.destroy)

        label.grid(row=0, columnspan=2)
        tk.Label(self, text="Логин:").grid(row=1, column=0)
        tk.Label(self, text="Пароль:").grid(row=2, column=0)
        entry_name.grid(row=1, column=1)
        entry_pass.grid(row=2, column=1)
        btn.grid(row=3, columnspan=2)

    def open(self):
        self.grab_set()
        self.wait_window()
        username = self.username.get()
        password = self.password.get()
        return User(username, password, self.user_type)

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        user_types = ("Админ", "Менеджер", "Клиент")
        self.user_type = tk.StringVar()
        self.user_type.set(user_types[0])

        label = tk.Label(self, text="Пожалуйста, выберите роль пользователя")
        radios = [tk.Radiobutton(self, text=t, value=t,
                                 variable=self.user_type) for t in user_types]
        btn = tk.Button(self, text="Создать", command=self.open_window)

        label.pack(padx=10, pady=10)
        for radio in radios:
            radio.pack(padx=10, anchor=tk.W)
        btn.pack(pady=10)

    def open_window(self):
        window = UserForm(self, self.user_type.get())
        user = window.open()
        print(user)

if __name__ == "__main__":
    app = App()
    app.mainloop()

import tkinter as tk
import tkinter.messagebox as mb

class Window(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.protocol("WM_DELETE_WINDOW", self.confirm_delete)
        self.label = tk.Label(self, text="Это всплывающее окно")
        self.button = tk.Button(self, text="Закрыть", command=self.destroy)
        self.label.pack(padx=20, pady=20)
        self.button.pack(pady=5, ipadx=2, ipady=2)

    def confirm_delete(self):
        message = "Вы уверены, что хотите закрыть это окно?"
        if mb.askyesno(message=message, parent=self):
            self.destroy()

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.btn = tk.Button(self, text="Открыть новое окно",
                             command=self.open_about)
        self.btn.pack(padx=50, pady=20)

    def open_about(self):
        window = Window(self)
        window.grab_set()

if __name__ == "__main__":
    app = App()
    app.mainloop()


import tkinter as tk

class About(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.label = tk.Label(self, text="Это всплывающее окно")
        self.button = tk.Button(self, text="Закрыть", command=self.destroy)

        self.label.pack(padx=20, pady=20)
        self.button.pack(pady=5, ipadx=2, ipady=2)

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.btn = tk.Button(self, text="Открыть новое окно",
                             command=self.open_window)
        self.btn.pack(padx=50, pady=20)

    def open_window(self):
        about = About(self)
        about.grab_set()

if __name__ == "__main__":
    app = App()
    app.mainloop()


from tkinter import *
 
 
def about():
    a = Toplevel()
    a.geometry('200x150')
    a['bg'] = 'grey'
    a.overrideredirect(True)
    Label(a, text="About this")\
        .pack(expand=1)
    a.after(5000, lambda: a.destroy())
 
 
root = Tk()
root.title("Главное окно")
Button(text="Button", width=20).pack()
Label(text="Label", width=20, height=3)\
    .pack()
Button(text="About", width=20, command=about)\
    .pack()
 
root.mainloop()


from tkinter import *
root = Tk()
 
Button(text="Button", width=30,height=10,bg='#555').pack()
Label(text='h' , width=50, height=10, bg='#159').pack()
Button(text="Button", width=20,bg='#951').pack()
 
root.update_idletasks()
s = root.geometry()
s = s.split('+')
s = s[0].split('x')
width_root = int(s[0])
height_root = int(s[1])

#в центре окна center
w = root.winfo_screenwidth()
h = root.winfo_screenheight()
w = w // 2
h = h // 2 
w = w - width_root // 2
h = h - height_root // 2
root.geometry('+{}+{}'.format(w, h))


from tkinter import *

root = Tk()
root.title('Create')
root.geometry('300x300+10+10')
root.resizable(0,0)
root['bg'] = '#159'

def close():
   exit()

def create_window():
    window = Toplevel(root)
    # Добавление элементов в window
    window['bg'] = '#951'
    window.geometry('200x200+20+20')
    window.resizable(0,0)
    window.title('Create two')
    btn1 = Button(window, text='Close', bg='#248', font='Arial 20 bold',pady=2,padx=2,command=close)
    btn1.grid(row=0,column=0)




btn = Button(root, text=" Create new window ", command=create_window)
btn.grid(row=0,column=0,sticky=N)



root.mainloop()

import tkinter as tk

def create_window():
    window = tk.Toplevel(root)
    # Добавление элементов в window
    ...

root = tk.Tk()
b = tk.Button(root, text="Create new window", command=create_window)
b.pack()

root.mainloop()


import math
rd = math.radians(180)
pi = math.pi
print(rd,pi)

import math
pi = math.pi
print(pi)

import time

print("Значение time.altzone : ", time.altzone)
#Значение time.altzone :  -25200

t = time.localtime()
print("time.asctime(t):%s " % time.asctime(t))
#time.asctime(t): Thu Oct  6 20:25:04 2022


from tkinter import *
import time

root = Tk()
root['bg'] = '#555'
root.geometry('600x600+10+10')
root.resizable(0,0)



def tick():
    # get the current local time from the PC
    time2 = time.strftime('%H:%M:%S')

    # if time string has changed, update it
    clock.config(text=time2)

    ##calls itself every 200 milliseconds to update the time
    # display as needed could use >200 ms
    clock.after(1000, tick)



def f(event):
    L1.config(text='Событие мышы\nнажата левая кл')


def f1(event):
    L2.config(text='Событие мышы\nнажата средняя кл')


def f2(event):
    L3.config(text='Событие мышы\nнажата правая кл')


def f3(event):
    L4.config(text='Событие мышы\nработает колесико')


def f4(event):
    L5.config(text='Событие клв\nнажата буква "S"')


def f5(event):
    L8.config(text='Событие клв\nнажата клавиша\n'+str(event))
    L6.config(text="Нажата клавиша \n"+event.char, font='Arial 9 bold')
    


def f6(event):
    L7.config(text='Событие клв\nнажат пробел')



 
L1 = Label(root, text='', width=20, height=10, bg='#783')
L1.place(x=0, y=0)
L2 = Label(root, text="", width=20, height=10, bg='#783')
L2.place(x=150, y=0)
L3 = Label(root, text="", width=20, height=10, bg='#783')
L3.place(x=300, y=0)
L4 = Label(root, text="", width=20, height=10, bg='#783')
L4.place(x=0, y=160)
L5 = Label(root, text="", width=20, height=10, bg='#783')
L5.place(x=150, y=160)
L6 = Label(root, text="", width=20, height=10, bg='#783')
L6.place(x=300, y=160)
L7 = Label(root, text="", width=20, height=10, bg='#783')
L7.place(x=0, y=320)
L8 = Label(root, text="", width=84, height=5, bg='#783')
L8.place(x=0, y=480)

clock = Label(root, font=('times', 20, 'bold'), bg='green')
clock.pack(fill=BOTH)

root.bind('<Button-1>', f)
root.bind('<Button-2>',f1)
root.bind('<Button-3>',f2)
root.bind('<MouseWheel>',f3)
root.bind('<s>',f4)
root.bind('<Key>',f5)
root.bind('<space>',f6)

tick()
root.mainloop()


from tkinter import *
window = Tk()
button = Button(text="Нажмите")

def fun(event):
    print(event)
window.bind("<Key>", fun)

#def fun(event):
   # print("Нажата клавиша "+event.char)
#window.bind("<Key>", fun)


#def fun(event):
    #print("кнопка нажата")
#button.bind("<MouseWheel>", fun)
#window.bind("<Double-Button-1>", fun)
#window.bind("<Motion>", fun)
#window.bind("<Return>", fun)
#window.bind("<space>", fun)
#window.bind("<s>", fun)

button.pack()
window.mainloop()
 


from tkinter import *
window = Tk()
button = Button(text="Нажмите")
def fun(event):
    print("кнопка нажата")
button.bind("<Button-1>", fun)
button.pack()
window.mainloop()

import pygame
import sys
 
FPS = 60
W = 700  # ширина экрана
H = 300  # высота экрана
WHITE = (255, 255, 255)
BLUE = (0, 70, 225)
 
sc = pygame.display.set_mode((W, H))
clock = pygame.time.Clock()
 
# координаты и радиус круга
x = W // 2
y = H // 2
r = 50
 
while 1:
    for i in pygame.event.get():
        if i.type == pygame.QUIT:
            sys.exit()
        elif i.type == pygame.KEYDOWN:
            if i.key == pygame.K_LEFT:
                x -= 3
            elif i.key == pygame.K_RIGHT:
                x += 3
 
    sc.fill(WHITE)
    pygame.draw.circle(sc, BLUE, (x, y), r)
    pygame.display.update()
    clock.tick(FPS)





def mousePressEvent(self, event):
        if event.button() == Qt.Qt.LeftButton:
            self.left_click.emit()
            print('left click')
        elif event.button() == Qt.Qt.RightButton:
            self.right_click.emit()
            print('right click')


from tkinter import Canvas
import tkinter

_width = 50
_height = 50
_size = 8

root = tkinter.Tk()
root.title("draw me a lovely matrix")
canv = Canvas(root, width=_width * _size, height=_height * _size)


class Wrapper:
    btn1d = False


def set_btn1d(value):
    print(value)
    Wrapper.btn1d = value


def toggle_color(rect):
    print('called')
    if Wrapper.btn1d:
        color = canv.itemcget(rect, 'fill')
        canv.itemconfig(rect, fill=("#aaa" if color == '#fff' else '#fff'))


rects = []
canv.bind('<ButtonPress-1>', lambda e, value=True: set_btn1d(value))
canv.bind('<ButtonRelease-1>', lambda e, value=False: set_btn1d(value))
for i in range(_size):
    for j in range(_size):
        rect = canv.create_rectangle(_width * j, _height * i, _width * (j + 1), _height * (i + 1), fill="#fff", width=0)
        rects.append(rect)
        canv.tag_bind(rect, '<Enter>', lambda e, rect=rect: toggle_color(rect))

canv.pack()
root.mainloop()


from tkinter import *
root = Tk()
root['bg'] = '#fafafa'#цвет окна
root.title('Первая программа')#название окна
root.resizable(0,0)#разворачивать окно
root.geometry('300x300+10+20') #размер окна
root.wm_attributes('-alpha',0.9)#прозрачность
canvas = Canvas(root, height=300, width=300, bg='red')
canvas.pack()
frame = Frame(root, bg='yellow')
frame.place(relx=0.15,rely=0.15,relheight=0.7,relwidth=0.7)
title = Label(frame, text='text', bg='green',font='Arial, 10')
title.pack()
btn = Button(frame, text='Button',bg='white')
btn.pack()
btn1 = Button(frame, text='Button1',bg='blue')
btn1.pack()
root.mainloop()

bnt3 = Button(root,text=' 11').grid(row=1,column=1,sticky=N)
bnt3 = Button(root,text=' Button1').grid(rowspan=1,column=1)
bnt3 = Button(root,text=' Button1').grid(row=1,column=1)

bnt3 = Button(root,text='Button3').pack(side = LEFT,fill=Y)
bnt = Button(root,text='Button2').pack(expand=True,ipadx=10,ipady=10)
bnt = Button(root,text='Button2').pack(fill=X,padx=[20,60],pady=30)
bnt = Button(root,text='Button2').pack(anchor='nw',padx=20,pady=0)
bnt1 = Button(root,text='Button1').pack(anchor='nw',padx=30,pady=0)
bnt = Button(root,text='Button2').pack(anchor='nw',padx=40,pady=0)
bnt1 = Button(root,text='Button1').pack(anchor='nw',padx=50,pady=0)

bnt = Button(root,text='Button2').pack(fill=BOTH,expand=True)
bnt1 = Button(root,text='Button1').pack(fill=BOTH,expand=True)
bnt1 = Button(root,text='Button1').pack(expand=True,ipadx=10,ipady=10)
bnt1 = Button(root,text='Button1').pack(side = LEFT,ipadx=5,ipady=5)
bnt2 = Button(root,text='Button2').pack(side = TOP,ipadx=10,ipady=10)
bnt3 = Button(root,text='Button3').pack(side = BOTTOM,ipadx=10,ipady=10)
bnt4 = Button(root,text='Button4').pack(side = RIGHT,ipadx=5,ipady=5)
bnt5 = Button(root,text='Button5').pack(expand=True,ipadx=10,ipady=10)центр



import webbrowser
import sys
from tkinter import *

def Start():
    print('Начало')
    webbrowser.open('https://www.youtube.com/',new=0)


def Browser():
    root =Tk()
    root.title('Assistant')
    root.geometry('550x500')
    Toplevel(root)

    button = Button(
    root,
    background='#555',
    foreground='#ccc',
    padx='20',
    pady='8',
    font='16',
    command=Start)
    button.pack()

    root.mainloop()

root = Tk() 
root.title('Assistant')
root.geometry('500x500')

btn = Button(text='youtube',
                background='#555',
                foreground='#ccc',
                padx='20',
                pady='8',
                font='16',
                command= Browser).pack()
root.mainloop()




import webbrowser
import sys
from tkinter import *

def Browser():
    print('Начало')
    webbrowser.open('https://www.goodle.com/',new=0)

def Browser1():
    print('Начало')
    webbrowser.open('https://www.YouTube.com/',new=0)

root = Tk() 
root.title('Assistant')
root.geometry('300x100')
root.resizable(0,0)

btn = Button(text='goodle',background='red',foreground='white', command= Browser).pack(anchor='nw',padx=10,pady=10)
btn1 = Button(text='YouTube',background='red',foreground='white', command= Browser1).pack(anchor='nw',padx=10,pady=0)

root.mainloop()




import webbrowser
import sys
from tkinter import *

def Browser():
    print('Начало')
    webbrowser.open('https://www.goodle.com/',new=0)

def Browser1():
    print('Начало')
    webbrowser.open('https://www.YouTube.com/',new=0)

def outText():
   print('text')
   

root = Tk() 
root.title('Assistant')
root.geometry('500x500')
#root.resizable(0,0)

btn = Button(text='goodle',background='red',foreground='white', command= Browser).pack(anchor='nw',padx=10,pady=10)
btn1 = Button(text='YouTube',background='red',foreground='white', command= Browser1).pack(anchor='nw',padx=10,pady=0)
btn2 = Button(text='outText',background='red',foreground='white', command= outText).pack(anchor='nw',padx=10,pady=10)

lab = Label(root).place(x=100,y=100)



root.mainloop()




from tkinter import *
from tkinter import messagebox
import random

def no():
    messagebox.showinfo('','Спасибо! Ваш голос учтен!')
    quit()


def motionMouse(event):
    btnYes.place(x=random.randint(0, 500), y=random.randint(180, 500))  
   
root = Tk()
root.geometry('600x600-10-10')
root.title('Опрос')
root.resizable(0,0)
root['bg'] = '#555'



lab = Label(root,text='Вы хотите увелтчить ЗП?', font='Arial 20 bold', bg='#fafafa').place(x=120,y=10)
btnYes = Button(root,text='Да',font='Arial 20 bold')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>', motionMouse)
btnNo =Button(root,text='Нет',font='Arial 20 bold',bg='#ffb700', command=no).place(x=350,y=100)

root.mainloop()


from tkinter import *
from tkinter import messagebox
import random

def NNo():
    messagebox.showinfo('.','привет ты еще тут???')
    quit()


def motionMouse(event):
    btnYes.place(x=random.randint(170, 400),y=random.randint(170, 500))

root =Tk()
root.geometry('600x600+10+10')
root.title('Опрос')
root.resizable(0,0)
root['bg'] = '#555'

lab=Label(root,text='Тест на выносливость',font='Arial 20 bold', bg='#ffb700').place(x=120,y=10)
btnYes = Button(root,text='Yes',font='Arial 20 bold',bg='#555')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>', motionMouse)
btnNo = Button(root,text='No', font='Arial 20 bold',bg='red',command=NNo).place(x=350,y=100)
root.mainloop()

2**10 корень
name = input('как тебя зовут?')
print(f'привет,{name}!')

name = input('как тебя зовут?')
print(f'Привет, {name}!')
lname = input('как твоя фамилия?')
print(f'Ясно, {name} {lname}!')

bool y=x>5
x=x//2
x=x%2
x%=2
x//=2
x+=2


x = 10
while True:
    x-=1    декримент + инкриментация


x = 10
while True:
    x-=1
    if x<=0:
        break
    print(x)
print('all')


PEP8


x = 9
while x>=0:
    
    
    print(x)
    x-=1
print('all')

for x in 5,7,3:
    print(x**2)


for x in range(1,10,3):
    print(x**2)


and or not



import turtle

def david():
    for step in range(6):
        turtle.begin_fill()
        for i in range(3):
            turtle.forward(30)
            turtle.left(360/3)
        turtle.end_fill()

        turtle.forward(100)
        turtle.right(60)



turtle.shape("turtle")
turtle.shapesize(2)
turtle.color('#258','green')
turtle.speed(10)

david()
turtle.backward(200)
david()


turtle.hideturtle()	



import tkinter as tk
import time

def questionQuery_After():
    btn.configure(text='Done')

def questionQuery(event):
    root.update_idletasks()
    root.after(2000, questionQuery_After)

root = tk.Tk()
btn = tk.Button(root, activebackground='red', text="Press me")
btn.pack()
btn.bind('<Button>', questionQuery)

root.mainloop()


import tkinter as tk
import time

def questionQuery_After():
    btn.configure(text='Done')

def questionQuery(event):
    root.update_idletasks()
    root.after(2000, questionQuery_After)

root = tk.Tk()
btn = tk.Button(root, activebackground='red', text="Press me",
 bg='yellow', background='cyan' )
btn.pack()
btn.bind('<Button>', questionQuery)

root.mainloop()


from tkinter import *

root = Tk()
frame_top = Frame(root) # root можно не указывать
frame_top.pack()
label_1 = Label(frame_top, width=7, height=4, bg='yellow', text="1")
label_1.pack(side=LEFT)
label_2 = Label(frame_top, width=7, height=4, bg='orange', text="2")
label_2.pack(side=LEFT)

frame_bottom = Frame(root)
frame_bottom.pack()
label_3 = Label(frame_bottom, width=7, height=4, bg='lightgreen', text="3")
label_3.pack(side=LEFT)
label_4 = Label(frame_bottom, width=7, height=4, bg='lightblue', text="4")
label_4.pack(side=LEFT)

root.mainloop()

from tkinter import *

root = Tk()

frame_top = LabelFrame(text="Верх")
frame_top.pack()
label_1 = Label(frame_top, width=7, height=4, bg='yellow', text="1")
label_1.pack(side=LEFT)
label_2 = Label(frame_top, width=7, height=4, bg='orange', text="2")
label_2.pack(side=LEFT)

frame_bottom = LabelFrame(text="Низ")
frame_bottom.pack()
label_3 = Label(frame_bottom, width=7, height=4, bg='lightgreen', text="3")
label_3.pack(side=LEFT)
label_4 = Label(frame_bottom, width=7, height=4, bg='lightblue', text="4")
label_4.pack(side=LEFT)

root.mainloop()


frame_top.pack(side=LEFT)
frame_bottom.pack(side=LEFT)

frame_top.pack(padx=100, pady=50)
frame_bottom.pack(ipadx=10, ipady=10)

frame_bottom.pack()
label_3.pack(side=LEFT, padx=10, pady=10)
label_4.pack(side=LEFT, padx=10, pady=10)

from tkinter import *
import time

def tick():
    # get the current local time from the PC
    time2 = time.strftime('%H:%M:%S')

    # if time string has changed, update it
    clock.config(text=time2)

    # calls itself every 200 milliseconds to update the time
    # display as needed could use >200 ms
    clock.after(200, tick)

root = Tk()
clock = Label(root, font=('times', 20, 'bold'), bg='green')
clock.pack(fill=BOTH, expand=1)

tick()
root.mainloop()



Всего же виджет Label может принимать следующие параметры:

anchor: управляет положением текста (или изображения) внутри метки. Допустимые значения: N, NE, E, SE, S, SW, W, NW или CENTER. По умолчанию это CENTER. (Заглавные сокращения букв, берутся от именования направлений North - север, South - юг, East - восток, West - запад)
background/bg: устанавливает цвет фона виджета, по умолчанию зависит от платформы.
bitmap: растровое изображение, отображаемое на виджете. Если указан параметр изображения, этот параметр игнорируется в автоматическом режиме.
borderwidth/bd: ширина границы метки. Значение по умолчанию зависит от системы, но обычно составляет от 1 до 2 пикселей.
compound: контролирует, как текст и изображения в пределах метки объединяются. По умолчанию, если задано изображение или растровое изображение, оно будет отображено вместо текста. Когда для этой опции установлено значение CENTER, на изображении отображается текст. Допустимые значения: BOTTOM, LEFT, RIGHT или TOP.
cursor: курсор, отображаемый, когда мышь перемещается над меткой. По умолчанию используется стандартный курсор.
disabledforeground: цвет переднего плана для использования, когда метка отключена или недействительна. Значение по умолчанию зависит от системы.
font: шрифт, используемый для надписей. Метки могут содержать только один текст шрифта. Значение по умолчанию зависит от системы.
foreground/fg: цвет метки, используемой для цвета текста и растровой метки. По умолчанию используется цвет заданный системой.
height: высота метки. Если текст отображается на метке, размер указывается в текстовых единицах. Если изображение отображается в метке, размер указывается в пикселях (или единицах экрана). Если вы установите размер 0 или пропустите его, он рассчитывается на основе содержимого метки.
image: изображение для отображения на виджете. Значением должно быть PhotoImage, BitmapImage или совместимый объект. Если указано, это переопределяет параметры текста и растрового изображения.
padx: горизонтальные отступы для добавления текста. По умолчанию используется 1 пиксель.
pady: вертикальный отступ, чтобы добавить вокруг текста. По умолчанию используется 1 пиксель


Однако если в коде создается одно окно, то кнопка и любой другой элемент уже по умолчанию размещаются в этом окне. Поэтому первый параметр можно опустить, как в примерах выше. Если бы у нас в коде создавалось бы несколько окон, тогда мы могли бы передать в Button(root) ссылку на нужное окно.

Второй параметр options представляет набор параметров, которые мы можем установить по их имени:

activebackground: цвет элемента, когда он находится в нажатом состоянии;
activefontground: цвет текста элемента, когда он в нажатом состоянии;
bd: толщина границы (по умолчанию 2);
bg/background: фоновый цвет;
fg/fontground: цвет текста;
font: шрифт текста, например, font= «Arial 14» - шрифт Arial высотой 14px, или font=(«Verdana», 13, «bold») - шрифт Verdana высотой 13px с выделением жирным;
height: высота элемента;
highlightcolor: цвет элемента, когда она в фокусе;
image: изображение на элементе;
justify: устанавливает выравнивание текста. Значение LEFT выравнивает текст по левому краю, CENTER - по центру, RIGHT - по правому краю;
padx: отступ от границ элемента до ее текста справа и слева;
pady: отступ от границ элемента до ее текста сверху и снизу;
relief: определяет тип границы, может принимать значения SUNKEN, RAISED, GROOVE, RIDGE;
state: устанавливает состояние элемента, может принимать значения DISABLED, ACTIVE, NORMAL (по умолчанию);
text: устанавливает текст элемента;
textvariable: устанавливает привязку к элементу StringVar;
underline: указывает на номер символа в тексте элемента, который подчеркивается. По умолчанию значение -1, то есть никакой символ не подчеркивается;
width: ширина элемента;
wraplength: при положительном значении строки текста будут переносится для вмещения в пространство элемента


from tkinter import messagebox

response = messagebox.askquestion('Message title', 'Message ask content')
response = messagebox.askyesno('Message title', 'Message y/n content')
response = messagebox.askyesnocancel('Message title', 'Message y/n/cancel content')
response = messagebox.askokcancel('Message title', 'Message ok/cancel content')
response = messagebox.askretrycancel('Message title', 'Message retry/cancel content')

from tkinter import *
from tkinter import filedialog

root = Tk()
document_open = filedialog.askopenfilename()
document_save = filedialog.asksaveasfilename()

root.mainloop(


print(4 + 7)  # 11 - math expression
print(2 * 3)  # 6 - math expression
print(9 - 1)  # 8 - math expression
icecream_count = 5
icecream_price = 60
print(icecream_count * icecream_price)  # 300 - math expression
minute_total = 257
hour_total = minute_total // 60  # 4 - math expression
minute_left = minute_total % 60  # 17 - math expression
print(f'{minute_total} minutes equals {hour_total} hours and {minute_left} minutes')

print(4 > 7)  # False - boolean expression
print(2 != 3)  # True - boolean expression
print(9 <= 1)  # False - boolean expression
icecream_price_old = 55
icecream_price_new = 60
print(icecream_price_new >= icecream_price_old)  # True - boolean expression
minute_total = 257
hour_total = 4
time_comparison = hour_total * 60 > minute_total  # False - boolean expression
print(time_comparison)



Название	Оператор	Синтаксис	Вывод
равно	==	a == b	Если значения a и b равны, то условие становится истинным: True.
не равно	!=	a != b	Если значения a и b не равны, то условие становится истинным: True.
больше	>	a > b	Если значение a больше, чем значение b, то условие становится истинным: True.
меньше	<	a < b	Если значение a меньше значения b, тогда условие становится истинным: True.
больше или равно	>=	a >= b	Если значение a больше или равно значения b, то условие становится истинным: True.
меньше или равно	<=	a <= b	Если значение b меньше или равно значения b, то условие становится истинным: True.

for i in range(1106):
    if chr(i).isprintable():
        print(chr(i), end='')

 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~¡¢£¤¥¦§¨©ª«¬®
 ...
 АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяѐё
 

for i in range(206):
    if chr(i).isprintable():
        print(f'{i} {chr(i)}\t\t{i+150} {chr(i+150)}\t\t{i+300} {chr(i+300)}'
              f'\t\t{i+450} {chr(i+450)}\t\t{i+600} {chr(i+600)}'
              f'\t\t{i+750} {chr(i+750)}\t\t{i+900} {chr(i+900)}')


Entry(master, options)
где master - ссылка на родительское окно, а options - набор следующих параметров:

bg: фоновый цвет
bd: толщина границы
cursor: курсор указателя мыши при наведении на текстовое поле
fg: цвет текста
font: шрифт текста
justify: устанавливает выравнивание текста. Значение LEFT выравнивает текст по левому краю, CENTER - по центру, RIGHT - по правому краю
relief: определяет тип границы, по умолчанию значение FLAT
selectbackground: фоновый цвет выделенного куска текста
selectforeground: цвет выделенного текста
show: задает маску для вводимых символов
state: состояние элемента, может принимать значения NORMAL (по умолчанию) и DISABLED
textvariable: устанавливает привязку к элементу StringVar
width: ширина элемента


from tkinter import *

root = Tk()
root.title("Welcome to entry app")
text = Entry(root, width=50)
text.pack()
root.mainloop()


from tkinter import *

root = Tk()
root.title("Welcome to the second entry app")
label_login = Label(root, text="Login")
label_login.pack()
text1 = Entry(root, width=50)
text1.pack()
label_pass = Label(root, text="Password")
label_pass.pack()
text2 = Entry(root, width=50)
text2.pack()
button = Button(root, text="Enter")
button.pack()
root.mainloop()

from tkinter import *

def check_pass():
    
    if entry_login.get() and entry_pass.get():
        label_welcome.config(text="Welcome!!!")
    else:
        label_welcome.configure(text="Please enter the login\nand the password.")

root = Tk()
root.title("Welcome to the second entry app")
label_login = Label(root, text="Login")
label_login.pack()
entry_login = Entry(root, width=10)
entry_login.pack()
label_pass = Label(root, text="Password")
label_pass.pack()
entry_pass = Entry(root, width=10, show='*')
entry_pass.pack()

button = Button(root, text="Enter", command=check_pass).pack()

label_welcome = Label(root)
label_welcome.pack()
root.mainloop()


from tkinter import *

root = Tk()
root.title("Welcome to entry app")

message = StringVar()
message.set("Any")
text = Entry(root, width=10, textvariable=message)
text.pack()

root.mainloop()

from tkinter import *
from tkinter import messagebox

def show_message():
    messagebox.showinfo("GUI Python", message.get())

root = Tk()
root.title("GUI на Python")
root.geometry("300x250")

message = StringVar()
message_entry = Entry(textvariable=message)
message_entry.pack()

message_button = Button(text="Click Me", command=show_message)
message_button.pack()

root.mainloop()


from tkinter import *
from tkinter import messagebox

def display_full_name():
    messagebox.showinfo("GUI Python", name.get() + " " + surname.get())

root = Tk()
root.title("GUI на Python")

name_label = Label(text="Введите имя:")
name_label.grid(row=0, column=0, sticky="w")
name = StringVar()
name_entry = Entry(textvariable=name)
name_entry.grid(row=0, column=1)

surname_label = Label(text="Введите фамилию:")
surname_label.grid(row=1, column=0, sticky="w")
surname = StringVar()
surname_entry = Entry(textvariable=surname)
surname_entry.grid(row=1, column=1)

message_button = Button(text="Click Me", command=display_full_name)
message_button.grid(row=2, column=1)

root.mainloop()


from tkinter import *
from tkinter import messagebox

def clear():
    name_entry.delete(0, END)
    surname_entry.delete(0, END)

def display():
    messagebox.showinfo("GUI Python", name_entry.get() + " " + surname_entry.get())

root = Tk()
root.title("GUI на Python")

name_label = Label(text="Введите имя:")
name_label.grid(row=0, column=0, sticky="w")
name_entry = Entry()
name_entry.grid(row=0,column=1)
name_entry.insert(0, "Tom")

surname_label = Label(text="Введите фамилию:")
surname_label.grid(row=1, column=0, sticky="w")
surname_entry = Entry()
surname_entry.grid(row=1, column=1)
surname_entry.insert(0, "Soyer")

display_button = Button(text="Display", command=display)
display_button.grid(row=2, column=0)
clear_button = Button(text="Clear", command=clear)
clear_button.grid(row=2, column=1)

root.mainloop()


from tkinter import *

root = Tk()
button_1 = Button(root, text="One", bg="red", fg="white")
button_1.pack()
button_2 = Button(root, text="Two", bg="green", fg="black")
button_2.pack(side=TOP, fill=X)
button_3 = Button(root, text="Three", bg="blue", fg="yellow")
button_3.pack(side=LEFT, fill=Y)
button_4 = Button(root, text="Four", bg="purple", fg="lightblue")
button_4.pack(side=RIGHT)
button_5 = Button(root, text="Five", bg="blue", fg="pink")
button_5.pack(side=BOTTOM)
root.mainloop()

from tkinter import *
root = Tk()
label = Label(bg="lightgreen", width=30, height=10, text="This is a label")
label.pack()
root.mainloop()


label.pack(expand=1)


label.pack(expand=1, fill=Y)

label.pack(expand=1, anchor=SE)


from tkinter import *

root = Tk()

button_top_left = Button(text="top left", font=13)
button_top_left.place(relx=0, rely=.0)
button_top_right = Button(text="top right", font=13)
button_top_right.place(relx=.7, rely=.0)
button_bottom_left = Button(text="bottom left", font=13)
button_bottom_left.place(relx=0, rely=.7)
button_bottom_right = Button(text="bottom right", font=13)
button_bottom_right.place(relx=.6, rely=.7)

root.mainloop()


from tkinter import *

clicks = 0

def click_button():
    global clicks
    clicks += 1
    button.config(text="Clicks {}".format(clicks))

root = Tk()
root.geometry("300x100")

button = Button(text="Clicks 0", bg="#555", fg="#ccc", font=16, command=click_button)
button.place(relx=.5, rely=.5, anchor="c")

root.mainloop()
Метод place() не отслеживает расширение виджетов. Поэтому не желателен для реализации интерфейса.

Метод grid() применяет следующие параметры:

column: номер столбца, отсчет начинается с нуля
row: номер строки (ряда), отсчет начинается с нуля
columnspan: сколько столбцов должен занимать элемент
rowspan: сколько строк (рядов) должен занимать элемент
ipadx и ipady: отступы по горизонтали и вертикали соответственно от границ элемента до его текста
padx и pady: отступы по горизонтали и вертикали соответственно от границ ячейки грида до границ элемента
sticky: выравнивание элемента в ячейке, если ячейка больше элемента.
 Может принимать значения: N, E, S, W, NE, NW, SE, SW, NSEW - они указывают соответствующее направление выравнивания


from tkinter import *

root = Tk()
root.title("Welcome to grid app!")
label = Label(root, text="Hello!")
label.grid(column=1, row=0)
button_1 = Button(root, text="Left")
button_1.grid(column=0, row=0)
button_2 = Button(root, text="Right")
button_2.grid(column=2, row=0)
button_3 = Button(root, text="Bottom")
button_3.grid(column=1, row=1)
root.mainloop()


from tkinter import *

root = Tk()
root.title("Welcome to the second entry app")

label_login = Label(root, text="Login")
label_login.grid(column=0, row=0, sticky=E)
field_login = Entry(root, width=10)
field_login.grid(column=1, row=0)

label_pass = Label(root, text="Password")
label_pass.grid(column=0, row=1, sticky=E)
field_pass = Entry(root, width=10)
field_pass.grid(column=1, row=1)

button = Button(root, text="Enter")
button.grid(column=0, row=2, columnspan=2, sticky=NSEW)

root.mainloop()

text = Text(root)
text.insert(END, "Вставка текста в конец.")
text.pack()
print(text.get(1.0, END))

frame_top.pack(padx=100, pady=50)
frame_bottom.pack(ipadx=10, ipady=10)

root.geometry("400x300")
root.resizable(False, False)


entry_display = Entry(textvariable=num, justify=RIGHT)
entry_display.grid(column=0, row=0, columnspan=5, sticky=NSEW)


print(chr(177))
print(chr(8730))

from tkinter import *

clicks = 0

def click_button():
    global clicks
    clicks += 1
    button.config(text="Clicks {}".format(clicks))

root = Tk()
root.geometry("300x100")

button = Button(text="Clicks 0", bg="#555", fg="#ccc", font=16, command=click_button)
button.place(relx=.5, rely=.5, anchor="c")

root.mainloop()

from tkinter import *

clicks = 0

def click_button():
    global clicks
    clicks += 1
    button.config(text="Clicks {}".format(clicks))

root = Tk()
root.geometry("300x100")

button = Button(text="Clicks 0", bg="#555", fg="#ccc", font=16, command=click_button)
button.place(relx=.5, rely=.5, anchor="c")

root.mainloop()

a = int(input())
if a < -5:
    print('Low')
elif -5 <= a <= 5:
    print('Mid')
else:
    print('High')

from tkinter import *
root = Tk()
 
def change(event):
    b['fg'] = "red"
    b['activeforeground'] = "red"
 
b = Button(text='RED', width=10, height=3)
b.bind('<Button-1>', change)
b.bind('<Return>', change)
 
b.pack()
 
root.mainloop()

from tkinter import *
root = Tk()
 
class RedButton:
    def __init__(self):
        self.b = Button(text='RED', width=10, height=3)
        self.b.bind('<Button-1>', self.change)
        self.b.pack()
 
    def change(self, event):
        self.b['fg'] = "red"
        self.b['activeforeground'] = "red"
 
RedButton()
root.mainloop()

from tkinter import *
 
 
def b1(event):
    root.title("Левая кнопка мыши")
 
 
def b3(event):
    root.title("Правая кнопка мыши")
 
 
def move(event):
    x = event.x
    y = event.y
    s = "Движение мышью {}x{}".format(x, y)
    root.title(s)
 
 
root = Tk()
root.minsize(width=500, height=400)
 
root.bind('<Button-1>', b1)
root.bind('<Button-3>', b3)
root.bind('<Motion>', move)
 
root.mainloop()


https://mail.google.com/mail/u/0/#inbox





print('Enter cycle number')
n = int(input())
k = 0

for i in range(0,n):
    print('Enter the number to be divisible by 4 and not divisible by 7')
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print('The number of numbers is ', k, ' divided by 4 and not divided by 7')


n = int(input())
k = 0

for i in range(0,n):
    num = int(input())
    if num % 4 ==0 and num % 7 != 0:
        k = k +1

print(k)



'''
sp1 = ('text0','text1','text2','text3')
print(sp1)
print(sp1[2])

print(sp1[::2])
'''
s1 = {'k': 'zn','collor': 'black', 'дерево':'листик'}

print(s1)

print(s1['k'])
s1['машина'] = 'двигатель'

print(s1)

s1['collor'] = 'white'
print(s1)

del s1['дерево']

print(s1)



sp1 = ['0','1','2','3','4' ]
print(sp1)

print(sp1[3])
a = 'day0'
sp1[3] = 'сено'
sp1[0] = a
print(sp1[3])
sp1.append('width')
del sp1[1]

print(sp1)

sp2 = [221,257,88,663,744,999,65,45,2,0]
sp3 = [21,'text',2563,'text']

sp4 = [sp1, sp2, sp3]

print(sp4)

print(sp4[1][1])

sp5 = [1,2,3]
sp6 = [4,5,6]
sp7 = sp5+sp6
print(sp7)

sp8 = [5,9]
sp9 = sp8 * 10
print(sp9)

print(sp1[:2])
print(sp1[1:3])
print(sp1[::2])



#t=2+2
#t=30-16
#t=2*36
#t=100/2
#t=100//2
#t = 10 % 12
#print(t)
"""
arr = [1,2,3,4,5,6,7,8,9,10]
for i in arr:
    if i % 2 == 0:
        print(i)

"""
"""
print(0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+
      0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1)
"""




'''
a = 0.1 
for i in range(13):
    a += 0.1
print(a)


try:
    print(24 / 0)
except Exception as e:
    print(e)
DivisionByZero

'''
'''
from array import *
data = array('i',[2,5,4,0,8]) 
#data.insert(4,10)
#data.pop(0)
for i in data:
    print(i)
    print(len(data))
'''
'''

arr = [10,11,0,5,0,8,0,9,0,7,0,321]

for i in arr:
    a = i
    b = None
    if a == 0:
        print('!!!!!!!! делитель равен нулю !!!!!!!!')
    else:
        b = 345/a
        print(' результат = ' + str(b))
'''


d1 = [1,4,5]
for i in range(2):
    d2 = []
    for j in range(2):
        d2.append(1)
    d1.append(d2)

print(d1)
print(d2)
print(i)





from random import randint
for i in range(1,11):
    s=0
    print(' ',2**i)
    i*=i
    print(i,"/")


import time
from time import gmtime, strftime

x = 0
def foo():
    time.sleep(1)

while True:
    n = strftime('%a,%d %b %Y %H:%M:%S ', gmtime())
    x +=1
    print(x)
    print(n)
    foo()
   #break
t = time.gmtime(0)
print(t)






import time
from time import gmtime, strftime

x = 0
def foo():
    time.sleep(1n)

while True:
    n = strftime('%a,%d %b %Y %H:%M:%S ', gmtime())
    x +=1
    print(x)
    print(n)
    foo()
   #break
t = time.gmtime(0)
print(t)

time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)
1111111111111111111111111111111111111111111111

import time

def foo():
    time.sleep(2.5)


t0 = time.clock()
foo()
print(time.clock() - t0, 'Время обработки в секундах')

t0 = time.time()
foo()
print(time.time() - t0, 'Время стены с секундах')

111111111111111111111111111111111111111111111

#program for translating from Russian into English

from cgitb import text
from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


#text translation function
def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)


#creating the main window
root = Tk()
root.geometry('500x340')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = '#555'

#class
translator = Translator()

#dictionary with languages
languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

#top Frame
header_frame = Frame(root, bg='#783')

#stretch in length
header_frame.pack(fill=X)

#central arrow Frame
header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

#first left Combobox
comboOne = ttk.Combobox(header_frame,values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0, pady=0, padx=0)

#Label with an arrow at the top
label = Label(header_frame, fg='black', bg='#783', font='Arial 20 bold',text='=>')
label.grid(row=0, column=1,pady=2)

#Text from the left Text input
lab=Label(root, text='Text input\nВвод текста', font='Arial 10 bold',bg='#783')
lab.place(x=0,y=50)

#Text from the left Output text
lab1=Label(root, text='Text Output\nВывод текста', font='Arial 9 bold',bg='#783')
lab1.place(x=0,y=160)

#second right Combobox
comboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='raedonly')
#Текущий/current/the language is automatically set to combo box
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

#first text entry window
t_input = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_input.place(x=90, y=50)

#text translation button
btn = Button(root, width=40, height=2, text='__________Перевести => Translate__________', font='Arial 15 bold',bg='#783', command=translate)
btn.place(x=5,y=270)

#second window for displaying the translated text
t_output = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_output.place(x=90, y=160)

#program cycle
root.mainloop()






pip install pygame
pip install googletrans==3.1.0a0
pip install installer 
installer -F

#program for translating from Russian into English

from cgitb import text
from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


#text translation function
def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)


#creating the main window
root = Tk()
root.geometry('500x340')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = '#555'

#class
translator = Translator()

#dictionary with languages
languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

#top Frame
header_frame = Frame(root, bg='#783')

#stretch in length
header_frame.pack(fill=X)

#central arrow Frame
header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

#first left Combobox
comboOne = ttk.Combobox(header_frame,values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0, pady=0, padx=0)

#Label with an arrow at the top
label = Label(header_frame, fg='black', bg='#783', font='Arial 20 bold',text='=>')
label.grid(row=0, column=1,pady=2)

#Text from the left Text input
lab=Label(root, text='Text input\nВвод текста', font='Arial 10 bold',bg='#783')
lab.place(x=0,y=50)

#Text from the left Output text
lab1=Label(root, text='Output text\nВывод текста', font='Arial 9 bold',bg='#783')
lab1.place(x=0,y=160)

#second right Combobox
comboTwo = ttk.Combobox(header_frame, values=[lang for lang in languages], state='raedonly')
#Текущий/current/the language is automatically set to combo box
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

#first text entry window
t_input = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_input.place(x=90, y=50)

#text translation button
btn = Button(root, width=40, height=2, text='__________Перевести => Translate__________', font='Arial 15 bold',bg='#783', command=translate)
btn.place(x=5,y=270)

#second window for displaying the translated text
t_output = Text(root, width=40, height=5, font='Arial 12 bold',bg='#999')
t_output.place(x=90, y=160)

#program cycle
root.mainloop()

from email import header
from fnmatch import translate
from gettext import translation
from tkinter import *
from tkinter import ttk
from googletrans import Translator


def translate():
    for language, suffix in languages.items():
        if comboTwo.get() == language:
            text = t_input.get('1.0', END)
            translation = translator.translate(text, dest=suffix)
            t_output.delete('1.0', END)
            t_output.insert('1.0',translation.text)



root = Tk()
root.geometry('500x350')
root.title('Переводчик')
root.resizable(0,0)
root['bg'] = 'black'
translator = Translator()

languages = {'Русский': 'ru', 'Английский': 'en', 'Французский': 'fr'}

header_frame = Frame(root, bg='black')
header_frame.pack(fill=X)

header_frame.grid_columnconfigure(0, weight=1)
header_frame.grid_columnconfigure(1, weight=1)
header_frame.grid_columnconfigure(2, weight=1)

comboOne = ttk.Combobox(header_frame,
                        values=[lang for lang in languages], state='readonly')
comboOne.current(0)
comboOne.grid(row=0, column=0)



label = Label(header_frame, fg='white', bg='black', font='Arial 20 bold',text='->')
label.grid(row=0, column=1)

comboTwo = ttk.Combobox(header_frame,
                        values=[lang for lang in languages], state='raedonly')
comboTwo.current(1)
comboTwo.grid(row=0,column=2)

t_input = Text(root, width=35, height=5, font='Arial 12 bold')
t_input.pack(padx=20)

btn = Button(root, width=45, text='Перевести', command=translate)
btn.pack()

t_output = Text(root, width=45, height=5, font='Arial 20 bold')
t_output.pack(pady=20)

root.mainloop()


from ast import Delete
from cgitb import text
from faulthandler import disable
from pickle import GLOBAL
import time
from tkinter import *
a = 0
f = 300

root = Tk()
root.title('Прога')
root.geometry('200x200+10+10')
root.resizable(0,0)

def bot():

    global f , a

    f = f+1

    btn.config(text=f, bg='#'+str(f+0))
    
    #entry.delete('0', END)
    entry.insert(END, '')
    #backgroundcolor = ' Black'
       #btn.config(text=f, bg='#'+str(f+0),background='yellow') 
    #time.sleep(0.2)
    while True:
        a = a + 1
        #time.sleep(1)
        entry.insert(END, a)
        
        if a >= 10:
            break
#time.sleep(10)

def gh():
    btn.config(state=['active'],fg='green',bd='10')

def dis():
    btn.config(state=['disabled'],fg='red',bg='gray',bd='0')
    

    
btn1 = Button(root, text='  Active  ',command=gh)
btn1.pack()

btn2 = Button(root, text='Disabled',command=dis)
btn2.pack()

btn = Button(root, text='Button', font='Arial 10 bold', padx=10, pady=10, bg='#562',
                                    bd='10',state=['disabled'],  fg='black',  command=bot)
btn.pack()

entry = Entry(root,width=30)
entry.pack()

root.mainloop()


from tkinter import *
import pyautogui

def b1(event):
    root.title('Левая кнопка мыши')


def b3(event):
    root.title('Right кнопка мыши')

def movemouse(event):
    #pyautogui.size()
    pyautogui.position()
    x = event.x
    y = event.y
    s = "движение мышью {} x {}" .format(x,y)
    root.title(s) 

   

root = Tk()

root.configure(bg='black')

btn = Button(text='Mause',command=movemouse)
btn.pack()

root.bind('<Button-1>', b1)
root.bind('<Button-3>', b3)
root.bind('<Motion>', movemouse)

root.mainloop()


from tkinter import * 


def event_info(event):
    print(type(event))
    print(event)
    print(event.time)
    print(event.x_root)
    print(event.y_root)


root = Tk()
root.bind('a', event_info)


root.mainloop()



from cgitb import text
from tkinter import *
from turtle import right


def left_click(event):
    frame1.config(bg='red')
    frame2.config(bg='white')
    frame3.config(bg='white')

    root.config(bg='white')
    root.title('Left_click')

def mid_click(event):
    frame1.config(bg='white')
    frame2.config(bg='red')
    frame3.config(bg='white')

    root.title('Middle_click')

def right_click(event):
    frame1.config(bg='white')
    frame2.config(bg='white')
    frame3.config(bg='red')

    root.title('Right_click')


root = Tk()
root.config(bg='#459')
root.title('Click')

frame1 = Frame(root, width=500, height=500, bg='white')
frame2 = Frame(root, width=500, height=500, bg='white')
frame3 = Frame(root, width=500, height=500, bg='white') 

frame1.grid(row=0, column=0, padx = 1, pady = 1)
frame2.grid(row=0, column=1, padx = 1, pady = 1)
frame3.grid(row=0, column=2, padx = 1, pady = 1)

root.bind('<Button-1>', left_click)
root.bind('<Button-2>', mid_click)
root.bind('<Button-3>', right_click)

root.mainloop()


from cgitb import text
from tkinter import *
from turtle import right


def left_click(event):
    frame1.config(bg='red')
    frame2.config(bg='white')
    frame3.config(bg='white')

    root.title('Left_click')

  

def mid_click(event):
    frame1.config(bg='white')
    frame2.config(bg='red')
    frame3.config(bg='white')
    root.title('Middle_click')

    

def right_click(event):
    frame1.config(bg='white')
    frame2.config(bg='white')
    frame3.config(bg='red')
    root.title('Right_click')

    


root = Tk()
root.config(bg='#459')
root.title('Click')

frame1 = Frame(root, width=500, height=500, bg='white')
frame2 = Frame(root, width=500, height=500, bg='white')
frame3 = Frame(root, width=500, height=500, bg='white') 

frame1.grid(row=0, column=0, padx = 1, pady = 1)
frame2.grid(row=0, column=1, padx = 1, pady = 1)
frame3.grid(row=0, column=2, padx = 1, pady = 1)

root.bind('<Button-1>', left_click)
root.bind('<Button-2>', mid_click)
root.bind('<Button-3>', right_click)

root.mainloop()






pip install python-tk
>>> import tkinter
>>> tkinter._test()
import Tkinter as tk

from tkinter import *
root = Tk()
root.title('Прога')
root.geometry('200x200')
root.resizable(0,0)
bnt = Button(root, text='Button').pack()
root.mainloop()




1
"topmost": must be -alpha, -transparentcolor, -disabled, -fullscreen, 
-toolwindow, or -topmost

from tkinter import *
root = Tk()
root['bg'] = '#fafafa'
root.title('name')

root.wm_attributes('-alpha',0.7) прозрачность
root.geometry('300x250')
root.resizable(width=False, height=False)
canvas = Canvas(root,height=300, width=250)
canvas.pack()
frame = Frame(root, bg='red')
frame.place(relx=0.15,rely=0.15,relwidth=0.7, relheigh=0.7)
title = Label(frame,text='text',bg='gray',font = 40)
title.pack()
btn = Button(frame, text='Button', bg='yellow')
btn.pack()

root.mainloop()
Russian Language Pack for Visual Studio Code  v1.71.9140935
MS-CEINTL.vscode-language-pack-ru
2


from tkinter  import *
root = Tk()

root.mainloop()

3


from tkinter import *
root = Tk()
root['bg']='#fafafa'
root.title('name')
root.wm_attributes('-alpha', 0.1)
root.wm_attributes('-fullscreen', True)
root.wm_attributes('-topmost', True)
root.mainloop()


from cgitb import text
from tkinter import *
from tkinter.tix import ButtonBox
root = Tk()
root['bg']='green'
root.title('name')
root.wm_attributes('-alpha', 0.9)
#root.wm_attributes('-fullscreen', True)
root.wm_attributes('-topmost', True)
root.geometry('300x300')
root.resizable(0,0)
a=10
d=10
c=a+d
root.title(c)
btv=Button(root,text="Serega "+  str(c))
btv.pack()
root.mainloop()

608b8b82342688f8ebfed1c85c76515a weather kye



import logging
from tkinter import *
from tkinter import font
from tkinter import messagebox
root = Tk()

def btn_click():
   # messagebox.showinfo('проверка',' сообщение')
    login = loginInput.get()
    password = passField.get()

    info_str = f'Логин: {str(login)}, Пароль: {str(password)}'
    messagebox.showinfo('Название',info_str)

    print('Some text')

root.title('name')
root['bg']='#fafafa'
root.geometry('310x305+10+100')
root.resizable(0,0)
root.wm_attributes('-alpha', 0.9)

canvas = Canvas(root,height=295,width=290,bg='gold')
canvas.pack()

frame = Frame(root, bg='red')
frame.place(relx=0.15,rely=0.15,relheight=0.7,relwidth=0.7)

title = Label(frame, text='text',bg='gray',font='Arial,40').pack()
#title.pack()
btn = Button(frame, text='Button', bg='yellow',font='Arial,20', command=btn_click)
btn.pack()
loginInput = Entry(frame,bg='white')
loginInput.pack()
passField = Entry(frame,bg='white',show='*')
passField.pack()

root.mainloop()

from logging import root
from tkinter import *
from unittest import result
from tkinter.font import Font
from urllib import request
root = Tk()

def get_weather():
    city = cityField.get()
    key ='608b8b82342688f8ebfed1c85c76515a'
    url = 'https://home.openweathermap.org/'
    params = {'APPID': key, 'q': city, 'units': 'imperial'}
    result = request.get(url,params=params) 
    weather = result.json()

    print(weather)




root['bg'] = '#fafafa'
root.title('Погода')
root.geometry('300x300+10+10')
root.resizable(0,0)

frame_top = Frame(root, bg='red',bd=5)
frame_top.place(rely=0.15,relx=0.15,relheight=0.25,relwidth=0.7)

frame_button = Frame(root,bg='green',bd=10)
frame_button.place(relx=0.15,rely=0.55,relwidth=0.7,relheight=0.25)

cityField = Entry(frame_top,bg='white')
cityField.pack()

btn = Button(frame_top, text='Просмотреть погоду', command=get_weather)
btn.pack()

info = Label(frame_button, text='Информация о погоде', bg='#ffb700')
info.pack()
root.mainloop()


from logging import root
from tkinter import *
from unittest import result
from tkinter.font import Font
from urllib import request
root = Tk()

def get_weather():
    city = cityField.get()
    key ='608b8b82342688f8ebfed1c85c76515a'
    url = 'https://home.openweathermap.org/'
    params = {'APPID': key, 'q': city, 'units': 'imperial'}
    result = request.get(url,params=params) 
    weather = result.json()

    print(weather)




root['bg'] = '#fafafa'
root.title('Погода')
root.geometry('300x300+10+10')
root.resizable(0,0)

frame_top = Frame(root, bg='red',bd=5)
frame_top.place(rely=0.15,relx=0.15,relheight=0.25,relwidth=0.7)

frame_button = Frame(root,bg='green',bd=10)
frame_button.place(relx=0.15,rely=0.55,relwidth=0.7,relheight=0.25)

cityField = Entry(frame_top,bg='white')
cityField.pack()

btn = Button(frame_top, text='Просмотреть погоду', command=get_weather)
btn.pack()

info = Label(frame_button, text='Информация о погоде', bg='#ffb700')
info.pack()
root.mainloop()


from tkinter import *
from tkinter import messagebox
import random


def no():
    messagebox.showinfo('','Спасибо за ваш выбор')
    quit()

def motionMouse(event):
    btnYes.place(x=random.randint(0,500),y=random.randint(0,500))


root = Tk()
root.geometry('600x600')
root.resizable(0,0)
root['bg'] = '#ffb700'
root.title('прог')

lab = Label(root, text='Лови кнопку',font="Arial 20 bold",bg='#555').pack()
btnYes = Button(root, text='Yes', font='Arial 20 bold',bg='red')
btnYes.place(x=170,y=100)
btnYes.bind('<Enter>',motionMouse)
btnNo = Button(root,text='No', font='Arial 20 bold', command=no).place(x=350, y=100)

root.mainloop()




from tkinter import *
from tkinter import messagebox
import random

def vihod():
    messagebox.showinfo('Quit','Quit')
    quit()

def motionMouse(event):
    btn1.place(x=random.randint(10,500), y=random.randint(150,500))

root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)
 
btn1 = Button(root, text='Button1', font='Arial 20 bold',bg='gold')
btn1.place(x=150,y=100)
btn1.bind('<Enter>', motionMouse )
btn2 = Button(root, text='Button2', font='Arial 20 bold',bg='#555', command=vihod).place(x=300,y=100)



lab1 = Label(root, text='Label1', font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 20 bold', bg='green').place(x=250 , y=5)
root.mainloop()

padx=10, pady=10 размер кнопки



from cgitb import text
from tkinter import *
from tkinter import messagebox
import random

global count
count = 100
count1 = 0

def vihod():
    #messagebox.showinfo('Quit','Quit')
    #quit()
    global count
    count += 1
    btn2.config(text='Button '+str(count+300),bg='#'+str(count+300))
    Frame1.config(bg='#'+str(count))
    root.config(bg='#'+str(count+100))
    btn1.config(text=count, bg='#'+str(count+200))
    lab1 = Label(root, text= count+400  , font='Arial 10 bold', bg='#'+str(count+400
                                                                )).place(x=150,y=75)
    if count>=110:
        lab2 = Label(root, text=count, font='Arial 20 bold', bg='red').place(x=count,y=count+50)

def motionMouse(event):
    btn1.place(x=random.randint(60,410), y=random.randint(156,530))
    global count1
    count1 += 1
    btn1.configure(text=count1)


 


root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)

Frame1 = Frame(root, bg='gold')
Frame1.place(relx=0.10,rely=0.26,relheight=0.7,relwidth=0.8)
 
btn1 = Button(root, text='Button1', font='Arial 10 bold',bg='gold', padx=30, pady=10)
btn1.place(x=150,y=100)

btn1.bind('<Enter>', motionMouse )

btn2 = Button(root, text='Button2', font='Arial 10 bold',bg='#510', command=vihod)
btn2.place(x=300,y=100)



lab1 = Label(root, text= count  , font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 10 bold', bg='green').place(x=250 , y=5)



root.mainloop()

from cgitb import text
from tkinter import *
from tkinter import messagebox
import random

global count
count = 100
count1 = 0

def vihod():
    #messagebox.showinfo('Quit','Quit')
    #quit()
    global count
    count += 1
    btn2.config(text='Button '+str(count+300),bg='#'+str(count+300))
    Frame1.config(bg='#'+str(count))
    root.config(bg='#'+str(count+100))
    btn1.config(text=count, bg='#'+str(count+200))
    lab1 = Label(root, text= count+400  , font='Arial 10 bold', bg='#'+str(count+400
                                                                )).place(x=150,y=75)
    if count>=110:
        lab2 = Label(root, text=count, font='Arial 20 bold', bg='red').place(x=count,y=count+50)

def motionMouse(event):
    btn1.place(x=random.randint(60,410), y=random.randint(156,530))
    global count1
    count1 += 1
    btn1.configure(text=count1)


 


root = Tk()
root.title('Test')
root['bg'] = '#ffb700'
root.geometry('600x600')
root.resizable(0,0)

Frame1 = Frame(root, bg='gold')
Frame1.place(relx=0.10,rely=0.26,relheight=0.7,relwidth=0.8)
 
btn1 = Button(root, text='Button1', font='Arial 10 bold',bg='gold', padx=30, pady=10)
btn1.place(x=150,y=100)

btn1.bind('<Enter>', motionMouse )

btn2 = Button(root, text='Button2', font='Arial 10 bold',bg='#510', command=vihod)
btn2.place(x=300,y=100)



lab1 = Label(root, text= count  , font='Arial 10 bold', bg='yellow').place(x=150,y=75)
lab2 = Label(root, text='Label2', font='Arial 10 bold', bg='red').place(x=300,y=75)
lab3 = Label(root, text='Label3', font='Arial 10 bold', bg='green').place(x=250 , y=5)



root.mainloop()


import time
from tkinter import *


time.sleep(5)









